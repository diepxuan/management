#!/usr/bin/env bash
#!/bin/bash

_MYSQL_REPLICATE=""
_MYSQL_REPLICATE_TOOGLE=""
_MYSQL_REPLICATE_TOOGLE=""
_MYSQL_REPLICATE_HOST=0

_DEBUG=0

--httpd(){
    --install(){
        #!/usr/bin/env bash

        # CREATE ductn SITE
        ###################
        #shellcheck disable=SC2002
        cat /var/www/base/httpd/httpd.conf | sudo tee /etc/apache2/sites-available/ductn.conf
        printf "\n\n" >>/etc/apache2/sites-available/ductn.conf
        find /var/www/base/httpd/*/httpd.conf -type f -exec cat {} \; | sudo tee -a /etc/apache2/sites-available/ductn.conf

        # CREATE Dav Access
        ###################
        # mkdir -p /var/www/DavLock
        sudo a2enmod dav dav_fs auth_digest &>/dev/null

        # APPLY APACHE CONFIG
        #####################
        sudo a2ensite ductn.conf
        sudo a2dismod mpm_prefork mpm_worker mpm_event
        sudo a2enmod proxy proxy_http headers deflate expires rewrite mcrypt reqtimeout vhost_alias ssl env dir mime &>/dev/null
        # sudo a2dismod php?.?
        # sudo a2enmod php7.1

        sudo apache2ctl configtest
        sudo service apache2 restart
        # sudo service apache2 status

    }

    -i(){
        --install
    }

    --config(){
        sudo mkdir -p /home/pma/public_html/tmp
        sudo rm -rf /home/pma/public_html/config.inc.php
        sudo ln /var/www/base/httpd/diepxuan.com/config.inc.php /home/pma/public_html/
        sudo chmod -R 777 /home/pma/public_html/tmp

        sudo mkdir -p /home/cloud/public_html/cloud
        sudo chmod -R 777 /home/cloud/public_html/cloud

        sudo chown -R :www-data /home/*/public_html/
    }

    $@
}

--swap(){
    --install(){
        sudo rm -rf /swapfile
        sudo fallocate -l 2G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
    }

    --remove(){
        sudo swapoff -v /swapfile
        sudo rm /swapfile
    }

    -i(){
        --install
    }

    $@
}

mysql(){
    --install(){
        --swap --install
        sudo apt install -y --purge --auto-remove mysql-server
        # sudo mysql_secure_installation
    }

    $@
}

--aliases() {
    --install(){
        echo ". /var/www/base/bash/.bash_aliases" > ~/.bash_aliases
        chmod 644 ~/.bash_aliases
        chmod +x /var/www/base/bash/*
    }

    -i(){
        --install
    }

    --remove(){
        rm -rf ~/.bash_aliases
    }

    $@
}

--composer(){
    --install(){
        cd ~
        curl -sS https://getcomposer.org/installer -o composer-setup.php
        HASH=`curl -sS https://composer.github.io/installer.sig`
        php -r "if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
        sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
        php -r "unlink('composer-setup.php');"
        rm -rf composer-setup.php
    }

    $@
}

--dns(){
    --install(){
        #!/bin/bash
        cd "$(dirname "$0")"

        # sudo apt install bind9 bind9utils bind9-doc dnsutils -y

        cat dns/slave.conf.options  | ssh dx1.diepxuan.com "sudo tee /etc/bind/named.conf.options"
        cat dns/slave.conf.local    | ssh dx1.diepxuan.com "sudo tee /etc/bind/named.conf.local"
        scp dns/db.* ductn@dx1.diepxuan.com
        ssh dx1.diepxuan.com "
            mkdir /etc/bind/zones
            sudo mv db.* /etc/bind/zones
            sudo service bind9 restart
        "

        cat dns/master.conf.options | ssh dx3.diepxuan.com "sudo tee /etc/bind/named.conf.options"
        cat dns/master.conf.local   | ssh dx3.diepxuan.com "sudo tee /etc/bind/named.conf.local"
        scp dns/db.* ductn@dx3.diepxuan.com:~/
        ssh dx3.diepxuan.com "
            mkdir -p /etc/bind/zones
            sudo mv ~/db.* /etc/bind/zones
            sudo service bind9 restart
        "
        # sudo apt install stunnel4 -y --purge --auto-remove
        # cat /var/www/base/bash/dns/stunnel.conf | sudo tee /etc/stunnel/stunnel.conf
        # sudo service bind9 restart
    }

    $@
}

--gitconfig(){

    --install(){
        cd /var/www/base/

        echo "installing"
        cat /var/www/base/bash/git/.gitignore >~/.gitignore
        chmod 644 ~/.gitignore

        # global gitignore
        git config --global core.excludesfile ~/.gitignore

        # setting
        git config --global user.name "Tran Ngoc Duc"
        git config --global user.email "caothu91@gmail.com"

        # alias
        git config --global alias.plog "log --graph --pretty=format:'%h -%d %s %n' --abbrev-commit --date=relative --branches"

        # push
        git config --global push.default simple

        # file mode
        git config --global core.fileMode false

        # line endings
        git config --global core.autocrlf false
        git config --global core.eol lf

        # Cleanup
        git config --global gc.auto 0

        # remote server
        git config --global receive.denyCurrentBranch updateInstead


        # remote repository
        cat /var/www/base/bash/git/push-to-checkout > .git/hooks/push-to-checkout
        chmod +x .git/hooks/push-to-checkout

        rm -rf .git/hooks/post-receive
        chmod +x .git/hooks/*
    }

    -i(){
        --install
    }

    --server(){
        echo "server update"
        cat /var/www/base/bash/git/post-receive > .git/hooks/post-receive
        chmod +x .git/hooks/*
    }

    $@

    echo "Done!"

    # git config http.postBuffer 524288000
    # git config receive.denyCurrentBranch refuse

}

--git(){
    --gitconfig $@
}

--ssl(){

    #!/bin/bash

    --install() {
      sudo apt install software-properties-common -y --purge --auto-remove
      # sudo add-apt-repository universe
      # sudo add-apt-repository ppa:certbot/certbot
      sudo apt update
      sudo apt install -y --purge --auto-remove python3-pip
      sudo pip3 install certbot certbot-dns-cloudflare
    }

    --upload(){
        sudo cat /etc/letsencrypt/live/diepxuan.com/cert.pem        | ssh ${@} "sudo tee /etc/letsencrypt/live/diepxuan.com/cert.pem"
        sudo cat /etc/letsencrypt/live/diepxuan.com/chain.pem       | ssh ${@} "sudo tee /etc/letsencrypt/live/diepxuan.com/chain.pem"
        sudo cat /etc/letsencrypt/live/diepxuan.com/fullchain.pem   | ssh ${@} "sudo tee /etc/letsencrypt/live/diepxuan.com/fullchain.pem"
        sudo cat /etc/letsencrypt/live/diepxuan.com/privkey.pem     | ssh ${@} "sudo tee /etc/letsencrypt/live/diepxuan.com/privkey.pem"
    }

    --setup(){

        #sudo certbot certonly --apache \
        #  --expand \
        #  --no-redirect \
        #  --keep-until-expiring \
        #  --break-my-certs \
        #  --pre-hook /var/www/base/bash/certbot/authenticator.sh \
        #  -m caothu91@gmail.com \
        #  --server https://acme-v02.api.letsencrypt.org/directory

        _certbot() {

          chmod 600 /var/www/base/bash/certbot/cloudflare.ini

          sudo certbot certonly \
            --expand \
            --keep-until-expiring \
            --dns-cloudflare \
            --dns-cloudflare-credentials /var/www/base/bash/certbot/cloudflare.ini \
            --agree-tos \
            --email caothu91@gmail.com \
            --eff-email \
            -d $@
        }

        #_certbot solzatech.com,www.solzatech.com
        _certbot diepxuan.com,www.diepxuan.com,luong.diepxuan.com,pma.diepxuan.com,cloud.diepxuan.com,work.diepxuan.com

        sudo service apache2 restart

        #  sudo cat /etc/letsencrypt/live/mail.diepxuan.com/fullchain.pem | ssh server3.diepxuan.com "sudo tee /etc/letsencrypt/live/mail.diepxuan.com/fullchain.pem"
        #  sudo cat /etc/letsencrypt/live/mail.diepxuan.com/privkey.pem | ssh server3.diepxuan.com "sudo tee /etc/letsencrypt/live/mail.diepxuan.com/privkey.pem"



        # sudo scp -r /etc/letsencrypt/live/* dx3.diepxuan.com:/etc/letsencrypt/live/
    }

    --pull(){
        sudo mkdir -p /etc/letsencrypt/live/diepxuan.com/
        ssh $@ "sudo cat /etc/letsencrypt/live/diepxuan.com/cert.pem"        | sudo tee /etc/letsencrypt/live/diepxuan.com/cert.pem
        ssh $@ "sudo cat /etc/letsencrypt/live/diepxuan.com/chain.pem"       | sudo tee /etc/letsencrypt/live/diepxuan.com/chain.pem
        ssh $@ "sudo cat /etc/letsencrypt/live/diepxuan.com/fullchain.pem"   | sudo tee /etc/letsencrypt/live/diepxuan.com/fullchain.pem
        ssh $@ "sudo cat /etc/letsencrypt/live/diepxuan.com/privkey.pem"     | sudo tee /etc/letsencrypt/live/diepxuan.com/privkey.pem
    }

    $@

}

--ssh(){
    --install(){
        #!/bin/bash

        ####################################
        #
        # SSH
        #
        ####################################
        # Create PEM file
        # ##############################
        #
        # openssl rsa -in id_rsa -outform PEM -out id_rsa.pem
        # openssl x509 -outform der -in id_rsa.pem -out id_rsa.crt

        # Change passphrase
        # ##############################
        # SYNOPSIS
        # #ssh-keygen [-q] [-b bits] -t type [-N new_passphrase] [-C comment] [-f output_keyfile]
        # #ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]
        # #-f filename Specifies the filename of the key file.
        # -N new_passphrase     Provides the new passphrase.
        # -P passphrase         Provides the (old) passphrase.
        # -p                    Requests changing the passphrase of a private key file instead of
        #                       creating a new private key.  The program will prompt for the file
        #                       containing the private key, for the old passphrase, and twice for
        #                       the new passphrase.
        #
        # ssh-keygen -t rsa -y > ~/.ssh/id_rsa.pub
        # ssh-keygen -f id_rsa -p

        # Setup
        # ##############################
        mkdir -p ~/.ssh
        # ssh config
        cat /var/www/base/ssh/config >~/.ssh/config
        printf "\n\n" >>~/.ssh/config
        find /var/www/base/ssh/config.d/*.conf -type f -exec cat {} \; -exec printf "\n\n" \; >>~/.ssh/config

        # ssh private key
        cat /var/www/base/ssh/id_rsa > ~/.ssh/id_rsa
        # cat /var/www/base/ssh/gss > ~/.ssh/gss
        # cat /var/www/base/ssh/tci > ~/.ssh/tci
        # cat /var/www/base/ssh/gem > ~/.ssh/gem

        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/*

        ssh-keygen -f ~/.ssh/id_rsa -y >~/.ssh/id_rsa.pub
        # ssh-keygen -f ~/.ssh/gss -y > ~/.ssh/gss.pub
        # ssh-keygen -f ~/.ssh/tci -y > ~/.ssh/tci.pub
        # ssh-keygen -f ~/.ssh/gem -y > ~/.ssh/gem.pub

        # ssh-copy-id user@123.45.56.78

        # cat /var/www/base/ssh/id_rsa        | ssh dx1.diepxuan.com "cat > ~/.ssh/id_rsa"
        # cat /var/www/base/ssh/id_rsa.pub    | ssh dx1.diepxuan.com "cat > ~/.ssh/id_rsa.pub"
        # ssh dx1.diepxuan.com "chmod 600 ~/.ssh/*"

    }

    -i(){
        --install
    }

    $@
}

--user(){
    --new(){
        #!/bin/bash

        sudo adduser ${1} --disabled-password --gecos \"\"
        sudo adduser ${1} www-data
        id -u ${1}

        sudo mkdir -p /home/${1}/.ssh
        sudo chmod 777 /home/${1}/.ssh


        cat ~/.ssh/id_rsa          | sudo tee /home/${1}/.ssh/id_rsa
        cat ~/.ssh/id_rsa.pub      | sudo tee /home/${1}/.ssh/id_rsa.pub
        cat ~/.ssh/authorized_keys | sudo tee /home/${1}/.ssh/authorized_keys

        sudo chmod    755       /home/${1}
        sudo chmod -R 600       /home/${1}/.ssh
        sudo chmod    700       /home/${1}/.ssh
        sudo chown -R ${1}:${1} /home/${1}/.ssh

        sudo mkdir -p               /home/${1}/public_html
        sudo chown -R ${1}:www-data /home/${1}/public_html

        sudo mkdir -p           /home/${1}/.ssl
        sudo chown -R ${1}:${1} /home/${1}/.ssl

        # echo "ductn ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/90-users

    }

    $@
}

--hosts(){
    #!/usr/bin/env bash
    # copy from https://gist.github.com/irazasyed/a7b0a079e7727a4315b9

    # PATH TO YOUR HOSTS FILE
    ETC_HOSTS=/etc/hosts

    # DEFAULT IP FOR HOSTNAME
    IP=$2

    # Hostname to add/remove.
    HOSTNAME=$3

    remove() {
        echo "removing host";
        if [[ -n "$(grep $HOSTNAME /etc/hosts)" ]]
        then
            echo "$HOSTNAME Found in your $ETC_HOSTS, Removing now...";
            sudo sed -i".bak" "/$HOSTNAME/d" ${ETC_HOSTS}
        else
            echo "$HOSTNAME was not found in your $ETC_HOSTS";
        fi
    }

    add() {
        echo "adding host";
        HOSTS_LINE="$IP\t$HOSTNAME"
        if [[ -n "$(grep $HOSTNAME /etc/hosts)" ]]
            then
                echo "$HOSTNAME already exists : $(grep $HOSTNAME ${ETC_HOSTS})"
            else
                echo "Adding $HOSTNAME to your $ETC_HOSTS";
                sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts";

                if [[ -n "$(grep $HOSTNAME /etc/hosts)" ]]
                    then
                        echo "$HOSTNAME was added successfully \n $(grep $HOSTNAME /etc/hosts)";
                    else
                        echo "Failed to Add $HOSTNAME, Try again!";
                fi
        fi
    }

    $@
}

--mysql-cluster(){
    --install(){
        # ductn_hosts add 35.229.247.242  server.diepxuan.com
        # ductn_hosts add 35.232.100.140  server2.diepxuan.com
        # ductn_hosts add 103.56.156.159  server3.diepxuan.com
        # wget https://repo.mysql.com//mysql-apt-config_0.8.15-1_all.deb -O mysql-apt-config.deb
        # sudo dpkg -i mysql-apt-config.deb
        # rm -rf mysql-apt-config.deb

        cd "$(dirname "$0")"

        _exec(){
            echo "dx$@.diepxuan.com"
            ssh dx$@.diepxuan.com "
                sudo mkdir -p /var/lib/mysql-cluster/
                echo \"net.ipv4.ip_forward = 1\"        | sudo tee /etc/sysctl.d/999-mysql-cluster.conf
                echo \"net.ipv4.ip_nonlocal_bind = 1\"  | sudo tee -a /etc/sysctl.d/999-mysql-cluster.conf
                sudo sysctl -f /etc/sysctl.d/999-mysql-cluster.conf
            "
            cat mysql_cluster/mysql-cluster.config.ini  | ssh dx$@.diepxuan.com "sudo tee /var/lib/mysql-cluster/config.ini"
            cat mysql_cluster/mysqld.cnf                | ssh dx$@.diepxuan.com "sudo tee /etc/mysql/conf.d/mysqld_cluster.cnf"
            cat mysql_cluster/dx$@.mysqld.cnf           | ssh dx$@.diepxuan.com "sudo tee -a /etc/mysql/conf.d/mysqld_cluster.cnf"
            cat mysql_cluster/ndb_mgmd.service          | ssh dx$@.diepxuan.com "sudo tee /etc/systemd/system/ndb_mgmd.service"
            cat mysql_cluster/ndbd.service              | ssh dx$@.diepxuan.com "sudo tee /etc/systemd/system/ndbd.service"
            ssh dx$@.diepxuan.com "
                sudo systemctl daemon-reload
                # sudo systemctl enable ndb_mgmd
                # sudo systemctl restart ndb_mgmd
                # sudo service ndb_mgmd restart
                # sudo service ndbd restart
                # sudo service mysql restart
            "
        }

        _exec 3
        _exec 2
        _exec 1
    }

    --remove(){
        _exec(){
            ssh dx$@.diepxuan.com "
                sudo systemctl stop ndb_mgmd
                sudo systemctl disable ndb_mgmd
                sudo systemctl stop ndbd
                sudo systemctl disable ndbd

                sudo rm -rf /var/lib/mysql-cluster/config.ini
                sudo rm -rf /etc/mysql/conf.d/mysqld_cluster.cnf
                sudo rm -rf /etc/systemd/system/ndb_mgmd.service
                sudo rm -rf /etc/systemd/system/ndbd.service
                sudo rm -rf /var/lib/mysql-cluster

                sudo apt remove mysql-apt-config mysql-cluster-community-management-server -y --purge --auto-remove
                sudo apt update
                sudo apt dist-upgrade -y --purge --auto-remove
            "
        }

        _exec 3
        _exec 2
        _exec 1
    }

    $@
}

--cronjob(){
    --install(){
        chmod u+x /var/www/base/bash/cronjob/*.sh
        chmod u+x /var/www/base/bash/cronjob/cronjob
        sudo crontab /var/www/base/bash/cronjob/cronjob.conf
    }

    --reload(){
        sudo service cron restart
    }

    -i(){
        --install
    }

    $@
}

--cron(){
    --cronjob
}

log(){
    ssh dx3.diepxuan.com "sudo tail -f /var/log/syslog" & ssh dx1.diepxuan.com "sudo tail -f /var/log/syslog"
}

--update(){

    allowip(){

        allowdomain(){
            getip(){
                echo "$(host $@ | cut -f4 -d' ')"
            }
            local Current_IP="$(getip $@)"
            sudo ufw allow from ${Current_IP} to any
            # echo "${Current_IP}"
        }

        allowdomain dxvnkthd.ddns.net
        allowdomain dxvnk113.ddns.net
        allowdomain dxvnkkcn.ddns.net
        allowdomain mg15vincom.ddns.net
    }

    $@

}

--fix(){
    #!/bin/bash

    apt(){
        sudo killall apt-get
        sudo killall apt

        sudo rm /var/lib/apt/lists/lock
        sudo rm /var/cache/apt/archives/lock
        sudo rm /var/lib/dpkg/lock
        sudo rm /var/lib/dpkg/lock-frontend

        sudo dpkg --configure -a
    }

    $@
}

init(){
    _INIT="on"
}

mysql-replicate(){
    _MYSQL_REPLICATE="on"

    while [ $# -gt 0 ]
    do
        case $1 in
            -i|--install)   _MYSQL_REPLICATE_TOOGLE="on" ;;
            --remove)       _MYSQL_REPLICATE_TOOGLE="off" ;;
            --host=?*|-h=?*)_MYSQL_REPLICATE_HOST=${1#*=} ;;
            --host|-h)      _MYSQL_REPLICATE_HOST=$2; shift ;;
            --host=)
                die 'ERROR: "--host" requires a non-empty option argument.'
                ;;
            --) break ;;
            -?*) printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2 ;;
            *) break ;;
        esac

        shift
    done

}

mysql-galera(){

    _MYSQL_GALERA="on"
    _MYSQL_GALERA_HOST=1

    while [ $# -gt 0 ]
    do
        case $1 in
            -i|--install)   _MYSQL_GALERA_TOOGLE="on" ;;
            --setup)        _MYSQL_GALERA_SETUP="on" ;;
            --remove)       _MYSQL_GALERA_TOOGLE="off" ;;
            --host=?*|-h=?*)_MYSQL_GALERA_HOST=${1#*=} ;;
            --host|-h)      _MYSQL_GALERA_HOST=$2; shift ;;
            --host=)
                die 'ERROR: "--host" requires a non-empty option argument.'
                ;;
            --) break ;;
            -?*) printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2 ;;
            *) break ;;
        esac

        shift
    done

}

pull(){
    cd "$(dirname "$0")"
    git fetch -ap
    git reset --hard origin/master
}

$@

cd "$(dirname "$0")"

F_init(){
    sudo timedatectl set-timezone Asia/Ho_Chi_Minh

    --cronjob -i
    # --update allowip
    --ssh -i
    # --git -i
    --aliases -i
    --httpd --config
}

F_mysql_replicate(){

    --install(){
        # ductn_hosts add 35.229.247.242  server.diepxuan.com
        # ductn_hosts add 35.232.100.140  server2.diepxuan.com
        # ductn_hosts add 103.56.156.159  server3.diepxuan.com
        # wget https://repo.mysql.com//mysql-apt-config_0.8.15-1_all.deb -O mysql-apt-config.deb
        # sudo dpkg -i mysql-apt-config.deb
        # rm -rf mysql-apt-config.deb



        sudo mkdir -p /var/lib/mysql-cluster/

        cat mysql_replicate/mysqld.cnf                | sudo tee /etc/mysql/conf.d/mysqld_cluster.cnf
        cat mysql_replicate/dx$@.mysqld.cnf           | sudo tee -a /etc/mysql/conf.d/mysqld_cluster.cnf

        sudo service mysql restart

        sudo mysql < mysql_replicate/replicate.sql

    }

    --remove(){
        sudo rm -rf /etc/mysql/conf.d/mysqld_cluster.cnf
        sudo mysql < mysql_replicate/remove.sql
        sudo service mysql restart
    }

    $@
}

if [[ $_INIT = "on" ]]; then
    # echo "_INIT = $_INIT"
    F_init
fi

if [[ $_MYSQL_REPLICATE = "on" ]]; then
    # echo "_MYSQL_REPLICATE = $_MYSQL_REPLICATE"
    if [[ $_MYSQL_REPLICATE_TOOGLE = "on" ]]; then
        # echo "_MYSQL_REPLICATE_TOOGLE = $_MYSQL_REPLICATE_TOOGLE"
        # echo "_MYSQL_REPLICATE_HOST = $_MYSQL_REPLICATE_HOST"
        F_mysql_replicate --install $_MYSQL_REPLICATE_HOST
    else
        F_mysql_replicate --remove
    fi
fi

F_mysql_galera(){

    --setup(){
        cd ~
        sudo add-apt-repository universe
        sudo apt install -y --purge --auto-remove software-properties-common apt-transport-https
        sudo add-apt-repository universe -r
        wget https://downloads.mariadb.com/MariaDB/mariadb_repo_setup -O mariasetup
        chmod +x mariasetup
        sudo ./mariasetup --mariadb-server-version="mariadb-10.3"
        sudo rm -rf ~/mariadb_repo_setup*
        sudo rm -rf ~/mariasetup*
    }

    --install(){
        cd "$(dirname "$0")"

        cat mysql_galera/mysqld.cnf                         | sudo tee /etc/mysql/conf.d/mysqld_cluster.cnf
        cat mysql_galera/dx${_MYSQL_GALERA_HOST}.mysqld.cnf | sudo tee -a /etc/mysql/conf.d/mysqld_cluster.cnf
    }

    --remove(){
        sudo rm -rf /etc/mysql/conf.d/mysqld_cluster.cnf
        sudo rm -rf /etc/apt/sources.list.d/galera.list
        sudo rm -rf /etc/apt/preferences.d/galera.pref
    }

    $@
}

if [[ $_MYSQL_GALERA = "on" ]]; then
    if [[ $_MYSQL_GALERA_SETUP = "on" ]]; then
        F_mysql_galera --setup
    fi

    if [[ $_MYSQL_GALERA_TOOGLE = "on" ]]; then
        F_mysql_galera --install
    elif [[ $_MYSQL_GALERA_TOOGLE = "off" ]]; then
        F_mysql_galera --remove
    fi
fi
