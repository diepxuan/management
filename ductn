#!/usr/bin/env bash
#!/bin/bash

_BASEDIR="/var/www/base"
_BASHDIR="$_BASEDIR/bash"
_LIBDIR="$_BASEDIR/lib"

ETC_PATH=/etc/ductn
USER_BIN_PATH=~/bin
DIRTMP=/tmp/ductn

SERVICE_DESC="Ductn service"
SERVICE_NAME=ductnd
# SERVICE_PATH="/var/www/base/bash/ductn.sh run_as_service"
SERVICE_PATH="ductn run_as_service"

# Ket noi den vpn server
# _IPTUNEL="pve2:1.1.1.1"

if [ -d /var/lib/ductn ]; then
    for f in /var/lib/*.sh; do
        [[ -f $f ]] && source $f
    done
fi

if [ -d /var/www/base/var/lib ]; then
    for f in /var/www/base/var/lib/*.sh; do
        [[ -f $f ]] && source $f
    done
fi

if [[ -f /var/www/base/ductn ]]; then
    source /var/www/base/ductn
    exit 0
fi

--init() {
    mkdir -p /tmp/ductn
    sudo chmod 777 -R /tmp/ductn

    --install
}

_DUCTN_COMMANDS+=("ddns:update")
--ddns:update() {
    --cloudflare:sync
}

#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("host:name")
--host:name() { # FQDN dc
    hostname -s
}

_DUCTN_COMMANDS+=("host:domain")
--host:domain() { # FQDN dc.diepxuan.com
    hostname -d
}

_DUCTN_COMMANDS+=("host:fullname")
--host:fullname() { # FQDN diepxuan.com
    hostname -f
}

_DUCTN_COMMANDS+=("host:address")
--host:address() {
    if [[ -n "$*" ]]; then
        --host:address:valid $(host $@ | grep -wv -e alias | cut -f4 -d' ')
        exit 0
    fi
    --host:address $(--host:fullname)
}

--host:address:valid() {
    --ip:valid "$@"
}

#_DUCTN_COMMANDS+=("host:ip")
--host:ip() {
    --host:address "$@"
}

--host:is_server() {
    [[ $(--host:fullname) =~ ^pve[0-9].diepxuan.com$ ]] && echo 1 || echo 0
}

--host:is_vpn_server() {
    [[ $(--host:fullname) =~ ^pve[0-9].vpn$ ]] && echo 1 || echo 0
}
#!/usr/bin/env bash
#!/bin/bash

_HTTPDDIR="$_LIBDIR/httpd"

_DUCTN_COMMANDS+=("httpd:install")
--httpd:install() {
    #!/usr/bin/env bash

    # CREATE Dav Access
    ###################
    # mkdir -p /var/www/DavLock
    sudo a2enmod dav dav_fs auth_digest &>/dev/null
    sudo chmod 775 /var/www/
    sudo chown :www-data /var/www/

    # APPLY APACHE CONFIG
    #####################
    sudo a2ensite ductn.conf
    # sudo a2dismod mpm_prefork mpm_worker mpm_event

    # sudo apt-get install libapache2-mpm-itk
    # sudo a2enmod mpm_itk

    sudo a2enmod proxy proxy_http headers deflate expires rewrite mcrypt reqtimeout vhost_alias ssl env dir mime &>/dev/null

    # sudo a2dismod php?.?
    # sudo a2enmod php7.1

    sudo apache2ctl configtest
    sudo service apache2 restart
    # sudo service apache2 status

}

_DUCTN_COMMANDS+=("httpd:config")
--httpd:config() {
    --chmod() {
        --httpd:config:chmod
    }

    --httpd:config:sites
}

--httpd:config:chmod() {
    sudo mkdir -p /home/pma/public_html/tmp
    sudo rm -rf /home/pma/public_html/config.inc.php
    sudo ln $_HTTPDDIR/diepxuan.com/config.inc.php /home/pma/public_html/
    sudo chmod -R 777 /home/pma/public_html/tmp

    sudo chown -R :www-data /home/*/public_html/
}

--httpd:config:sites() {
    # CREATE ductn SITE
    ###################
    #shellcheck disable=SC2002
    cat $_HTTPDDIR/httpd.conf | sudo tee /etc/apache2/sites-available/ductn.conf
    printf "\n\n" | sudo tee -a /etc/apache2/sites-available/ductn.conf
    # find $_HTTPDDIR/*/httpd.conf $_HTTPDDIR/*/httpd.conf.d/ -type f -exec cat {} \; | sudo tee -a /etc/apache2/sites-available/ductn.conf
    find $_HTTPDDIR/*/httpd.conf $_HTTPDDIR/*/httpd.conf.d/*.conf -type f | sort -n | xargs cat | sudo tee -a /etc/apache2/sites-available/ductn.conf
}

_DUCTN_COMMANDS+=("httpd:restart")
--httpd:restart() {
    --httpd:config $@
    sudo service apache2 restart
}
#!/usr/bin/env bash
#!/bin/bash

_IP_EXTEND=

_DUCTN_COMMANDS+=("ip:wan")
--ip:wan() {

    # IPANY="$(dig @ns1.google.com -t txt o-o.myaddr.l.google.com +short | tr -d \")"
    # GOOGv4="$(dig -4 @ns1.google.com -t txt o-o.myaddr.l.google.com +short | tr -d \")"
    # GOOGv6="$(dig -6 @ns1.google.com -t txt o-o.myaddr.l.google.com +short | tr -d \")"
    # AKAMv4="$(dig -4 @ns1-1.akamaitech.net -t a whoami.akamai.net +short)"
    # CSCOv4="$(dig -4 @resolver1.opendns.com -t a myip.opendns.com +short)"
    # CSCOv6="$(dig -6 @resolver1.opendns.com -t aaaa myip.opendns.com +short)"
    # printf '$GOOG:\t%s\t%s\t%s\n' "${IPANY}" "${GOOGv4}" "${GOOGv6}"
    # printf '$AKAM:\t%s\n$CSCO:\t%s\t%s\n' "${AKAMv4}" "${CSCOv4}" "${CSCOv6}"

    # if [[ -z ${_IP_EXTEND+x} ]]; then continue; else
    #     # _IP_EXTEND=$(dig @resolver4.opendns.com myip.opendns.com +short)
    #     _IP_EXTEND=$(dig -4 @ns1.google.com -t txt o-o.myaddr.l.google.com +short | tr -d \")
    # fi

    [[ -z "$_IP_EXTEND" ]] && _IP_EXTEND="$(dig -4 @ns1.google.com -t txt o-o.myaddr.l.google.com +short | tr -d \" 2>/dev/null)"
    echo $(--ip:valid $_IP_EXTEND)
}

--ip:wanv4() {
    dig @resolver4.opendns.com myip.opendns.com +short -4
}

--ip:wanv6() {
    dig @resolver1.ipv6-sandbox.opendns.com AAAA myip.opendns.com +short -6
}

_DUCTN_COMMANDS+=("ip:local")
--ip:local() {
    hostname -I | awk '{print $1}'
}

--ip:valid() {
    _IP=$@
    if expr "$_IP" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
        echo $_IP
        exit 0
    else
        echo $(--ip:local)
        exit 1
    fi
}

# _DUCTN_COMMANDS+=("ip:check")
--ip:check() {
    # Specify DNS server
    dnsserver="8.8.8.8"
    # function to get IP address
    function get_ipaddr {
        ip_address=""
        # A and AAA record for IPv4 and IPv6, respectively
        # $1 stands for first argument
        if [ -n "$1" ]; then
            hostname="${1}"
            if [ -z "query_type" ]; then
                query_type="A"
            fi
            # use host command for DNS lookup operations
            host -t ${query_type} ${hostname} ${dnsserver} &>/dev/null
            if [[ "$?" -eq "0" ]]; then
                # get ip address
                ip_address="$(host -t ${query_type} ${hostname} ${dnsserver} | awk '/has.*address/{print $NF; exit}')"
            else
                exit 1
            fi
        else
            exit 2
        fi
        # display ip
        echo $ip_address
    }
    hostname="$(--host:fullname)"
    for query in "A-IPv4" "AAAA-IPv6"; do
        query_type="$(printf $query | cut -d- -f 1)"
        ipversion="$(printf $query | cut -d- -f 2)"
        address="$(get_ipaddr ${hostname})"
        if [ "$?" -eq "0" ]; then
            if [ -n "${address}" ]; then
                echo "The ${ipversion} adress of the Hostname ${hostname} is: $address"
            fi
        else
            echo "An error occurred"
        fi
    done
}
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("log:watch")
--log:watch() {
    # ssh dx3.diepxuan.com "sudo tail -f /var/log/syslog" &
    # ssh dx1.diepxuan.com "sudo tail -f /var/log/syslog"
    sudo tail -f /var/log/*log /var/opt/mssql/log/errorlog
}

_DUCTN_COMMANDS+=("log:watch:service")
--log:watch:service() {
    sudo journalctl -u "$@".service -f
}

_DUCTN_COMMANDS+=("log:cleanup")
--log:cleanup() {

    # #!/bin/sh
    # if [ -d "/var/opt/mssql/log" ]; then
    #     sudo find /var/opt/mssql/log -type f -regex ".*\.gz$" -delete
    #     sudo find /var/opt/mssql/log -type f -regex ".*\.[0-9]$" -delete
    #     logs=$(sudo find /var/opt/mssql/log -type f)
    #     for i in $logs; do
    #         sudo truncate -s 0 $i
    #     done
    # fi

    #!/bin/sh

    # Check the Drive Space Used by Cached Files
    # du -sh /var/cache/apt/archives

    # Clean all the log file
    # for logs in `find /var/log -type f`;  do > $logs; done

    logs=$(sudo find /var/log -type f)
    for i in $logs; do
        sudo truncate -s 0 $i
    done

    #Getting rid of partial packages
    # sudo apt-get clean && sudo apt-get autoclean
    # apt-get remove --purge -y software-properties-common

    #Getting rid of no longer required packages
    # sudo apt-get autoremove -y

    #Getting rid of orphaned packages
    # deborphan | xargs sudo apt-get -y remove --purge

    #Free up space by clean out the cached packages
    # apt-get clean

    # Remove the Trash
    sudo rm -rf /home/*/.local/share/Trash/*/**
    sudo rm -rf /root/.local/share/Trash/*/**

    # Remove Man
    sudo rm -rf /usr/share/man/??
    sudo rm -rf /usr/share/man/??_*

    #Delete all .gz and rotated file
    # sudo find /var/log -type f -regex ".*\.gz$" | xargs sudo rm -Rf
    # sudo find /var/log -type f -regex ".*\.[0-9]$" | xargs sudo rm -Rf
    sudo find /var/log /var/opt/mssql/log -type f -regex ".*\.gz$" -delete
    sudo find /var/log /var/opt/mssql/log -type f -regex ".*\.[0-9]*$" -delete

    #Cleaning the old kernels
    # dpkg-query -l|grep linux-im*
    #dpkg-query -l |grep linux-im*|awk '{print $2}'
    # apt-get purge $(dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | head -n -1) --assume-yes
    # apt-get install linux-headers-`uname -r|cut -d'-' -f3`-`uname -r|cut -d'-' -f4`
}

_DUCTN_COMMANDS+=("log:config")
--log:config() {
    sudo truncate -s 0 /etc/logrotate.d/ductn
    --log:config:store
    --log:config:mssql

    sudo logrotate -f /etc/logrotate.d/ductn
}

--log:config:store() {
    if id "store" &>/dev/null; then
        echo "/home/store/public_html/var/log/*.log {
    su store www-data
    size 1M
    copytruncate
    rotate 1
}
" | sudo tee --append /etc/logrotate.d/ductn >/dev/null
    fi
}

--log:config:mssql() {
    if id "mssql" &>/dev/null; then
        echo "/var/opt/mssql/log/errorlog /var/opt/mssql/log/*.log {
    su mssql mssql
    size 10M
    copytruncate
    missingok
    rotate 1
}
" | sudo tee --append /etc/logrotate.d/ductn >/dev/null
    fi

}
#!/usr/bin/env bash
#!/bin/bash

--sqlsrv:apt:install() {
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    # sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2019.list)"
    # sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)"
    sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)"
    # sudo apt update
}

--sqlsrv:ad:spn() {
    # From DC

    # Create User
    # Import-Module ActiveDirectory
    # New-ADUser mssql -AccountPassword (Read-Host -AsSecureString "Enter Password") -PasswordNeverExpires $true -Enabled $true
    # Properties -> Accounts -> Account options: -> checked
    # - This account supports Kerberos AES 128 bit encryption
    # - This account supports Kerberos AES 256 bit encryption

    # create SPN
    setspn -A MSSQLSvc/dc3.diepxuan.com:1433 mssql
    setspn -A MSSQLSvc/dx3:1433 mssql

    # From SqlSrv Host
    kinit Administrator@DIEPXUAN.COM
    kvno Administrator@DIEPXUAN.COM
    kvno MSSQLSvc/dx3:1433@DIEPXUAN.COM
    # MSSQLSvc/dx3:1433@DIEPXUAN.COM: kvno = 2

    # From DC
    # Create mssql.keytab
    ktpass /princ MSSQLSvc/dc3.diepxuan.com:1433@DIEPXUAN.COM /ptype KRB5_NT_PRINCIPAL /crypto aes256-sha1 /mapuser mssql@diepxuan.com /out mssql.keytab -setpass -setupn /kvno 2 /pass Ductn@7691
    ktpass /princ MSSQLSvc/dc3.diepxuan.com:1433@DIEPXUAN.COM /ptype KRB5_NT_PRINCIPAL /crypto rc4-hmac-nt /mapuser mssql@diepxuan.com /in mssql.keytab /out mssql.keytab -setpass -setupn /kvno 2 /pass Ductn@7691

    ktpass /princ MSSQLSvc/dx3:1433@DIEPXUAN.COM /ptype KRB5_NT_PRINCIPAL /crypto aes256-sha1 /mapuser mssql@diepxuan.com /in mssql.keytab /out mssql.keytab -setpass -setupn /kvno 2 /pass Ductn@7691
    ktpass /princ MSSQLSvc/dx3:1433@DIEPXUAN.COM /ptype KRB5_NT_PRINCIPAL /crypto rc4-hmac-nt /mapuser mssql@diepxuan.com /in mssql.keytab /out mssql.keytab -setpass -setupn /kvno 2 /pass Ductn@7691

    ktpass /princ mssql@DIEPXUAN.COM /ptype KRB5_NT_PRINCIPAL /crypto aes256-sha1 /mapuser mssql@diepxuan.com /in mssql.keytab /out mssql.keytab -setpass -setupn /kvno 2 /pass Ductn@7691
    ktpass /princ mssql@DIEPXUAN.COM /ptype KRB5_NT_PRINCIPAL /crypto rc4-hmac-nt /mapuser mssql@diepxuan.com /in mssql.keytab /out mssql.keytab -setpass -setupn /kvno 2 /pass Ductn@7691
    # Or from SqlSrv Host
    sudo ktutil
    ktutil: addent -password -p MSSQLSvc/dc3.diepxuan.com:1433@DIEPXUAN.COM -k 2 -e aes256-cts-hmac-sha1-96
    ktutil: addent -password -p MSSQLSvc/dc3.diepxuan.com:1433@DIEPXUAN.COM -k 2 -e rc4-hmac
    ktutil: addent -password -p MSSQLSvc/dx3:1433@DIEPXUAN.COM -k 2 -e aes256-cts-hmac-sha1-96
    ktutil: addent -password -p MSSQLSvc/dx3:1433@DIEPXUAN.COM -k 2 -e rc4-hmac
    ktutil: addent -password -p mssql@DIEPXUAN.COM -k 2 -e aes256-cts-hmac-sha1-96
    ktutil: addent -password -p mssql@DIEPXUAN.COM -k 2 -e rc4-hmac
    ktutil: wkt /var/opt/mssql/secrets/mssql.keytab
    ktutil: quit

    # mssql.keytab
    # Copy to SqlSrv Host under the folder /var/opt/mssql/secrets

    # From SqlSrv Host
    sudo chown mssql:mssql /var/opt/mssql/secrets/mssql.keytab
    sudo chmod 400 /var/opt/mssql/secrets/mssql.keytab
    sudo mssql-conf set network.privilegedadaccount mssql
    sudo /opt/mssql/bin/mssql-conf set network.kerberoskeytabfile /var/opt/mssql/secrets/mssql.keytab
    sudo systemctl restart mssql-server
}
#!/usr/bin/env bash
#!/bin/bash

#sudo apt install -y unixodbc tdsodbc php?.?-sybase &>/dev/null
#sudo phpenmod sybase

_DUCTN_COMMANDS+=("sqlsrv:php:install")
--sqlsrv:php:install() {
    # Install PHP and other required packages
    #########################################
    ductn php:apt:install
    sudo apt install -y php-dev php-xml -y

    # Install the ODBC Driver and SQL Command Line Utility for SQL Server
    #####################################################################
    ductn sqlsrv:apt:install

    # curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    # # curl https://packages.microsoft.com/config/ubuntu/19.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
    # curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
    # sudo apt update

    sudo ACCEPT_EULA=Y apt install msodbcsql17 mssql-tools locales unixodbc-dev -y
    # sudo ACCEPT_EULA=Y apt install unixodbc-dev -y
    sudo locale-gen en_US.utf8
    sudo update-locale
    #sqlcmd -S localhost -U sa -P yourpassword -Q "SELECT @@VERSION"
    #echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
    #source ~/.bashrc

    # Install the PHP Driver for SQL Server
    #######################################
    # sudo apt install php-pear gcc g++ make autoconf libc-dev pkg-config libxml2-dev -y
    sudo apt install php-pear -y
    sudo pecl channel-update pecl.php.net
    sudo pecl install sqlsrv pdo_sqlsrv
    # sudo pecl install sqlsrv-5.7.0preview pdo_sqlsrv-5.7.0preview
}

_DUCTN_COMMANDS+=("sqlsrv:php:enable")
--sqlsrv:php:enable() {
    --sqlsrv:php:disable
    # printf "priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/5.6/mods-available/sqlsrv.ini
    # printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/5.6/mods-available/pdo_sqlsrv.ini

    # printf "priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/7.0/mods-available/sqlsrv.ini
    # printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/7.0/mods-available/pdo_sqlsrv.ini

    # printf "priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/7.1/mods-available/sqlsrv.ini
    # printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/7.1/mods-available/pdo_sqlsrv.ini

    # printf "priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/7.2/mods-available/sqlsrv.ini
    # printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/7.2/mods-available/pdo_sqlsrv.ini

    # printf "priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/7.3/mods-available/sqlsrv.ini
    # printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/7.3/mods-available/pdo_sqlsrv.ini

    # printf "priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/7.4/mods-available/sqlsrv.ini
    # printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/7.4/mods-available/pdo_sqlsrv.ini

    # printf "; priority=20\nextension=sqlsrv.so\n" | sudo tee /etc/php/8.0/mods-available/sqlsrv.ini
    # printf "; priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee /etc/php/8.0/mods-available/pdo_sqlsrv.ini
    $(php --ini | grep "Configuration File (php.ini)" | sed -e "s|.*:\s*||" -e "s/\/cli$//")
    printf "priority=20\nextension=sqlsrv.so\n" | sudo tee $(php --ini | grep "Configuration File (php.ini)" | sed -e "s|.*:\s*||" -e "s/\/cli$//")/mods-available/sqlsrv.ini
    printf "priority=30\nextension=pdo_sqlsrv.so\n" | sudo tee $(php --ini | grep "Configuration File (php.ini)" | sed -e "s|.*:\s*||" -e "s/\/cli$//")/mods-available/pdo_sqlsrv.ini

    # sudo phpenmod -v 8.0 sqlsrv pdo_sqlsrv
    sudo phpenmod sqlsrv pdo_sqlsrv

    #echo extension=sqlsrv.so | sudo tee -a `php --ini | grep "Scan for additional .ini files" | sed -e "s|.*:\s*||"`/20-sqlsrv.ini
    #echo extension=pdo_sqlsrv.so | sudo tee -a `php --ini | grep "Scan for additional .ini files" | sed -e "s|.*:\s*||"`/30-pdo_sqlsrv.ini
}

_DUCTN_COMMANDS+=("sqlsrv:php:disable")
--sqlsrv:php:disable() {
    sudo phpdismod sqlsrv pdo_sqlsrv
    sudo /usr/sbin/service apache2 restart
}

_DUCTN_COMMANDS+=("mssql:php:install")
--mssql:php:install() {
    --sqlsrv:php:install
}

_DUCTN_COMMANDS+=("mssql:php:enable")
--mssql:php:enable() {
    --sqlsrv:php:enable
    sudo /usr/sbin/service apache2 start
}

_DUCTN_COMMANDS+=("mssql:php:disable")
--mssql:php:disable() {
    --sqlsrv:php:disable
}
#!/usr/bin/env bash
#!/bin/bash

--sqlsrv:apt:install() {
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    # sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/16.04/mssql-server-2019.list)"
    # sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/18.04/mssql-server-2019.list)"
    sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/20.04/mssql-server-2019.list)"
    # sudo apt update
}

_DUCTN_COMMANDS+=("sqlsrv:install")
--sqlsrv:install() {
    --sqlsrv:apt:install

    # Install SQL Server
    ####################
    sudo apt install -y mssql-server

    # Configration SQL Server
    ####################
    sudo /opt/mssql/bin/mssql-conf setup
}

_DUCTN_COMMANDS+=("mssql:install")
--mssql:install() {
    --sqlsrv:install
}

--sqlsrv:cron() {
    --sqlsrv:install
}
#!/usr/bin/env bash
#!/bin/bash

CERTDIR=/etc/mysql/certs/
_MYSQLDIR="$_LIBDIR/mysql"

_DUCTN_COMMANDS+=("mysql:setup")
--mysql:setup() {
    $_BASHDIR/ductn --swap --install
    sudo apt install -y --purge --auto-remove mysql-server
    # sudo mysql_secure_installation
}

_DUCTN_COMMANDS+=("mysql:ssl:enable")
--mysql:ssl:enable() {
    mkdir $CERTDIR
    # openssl genrsa 4096 | sudo tee ca-key.pem
    sudo cp $_MYSQLDIR/ssl/*.pem $CERTDIR
    sudo openssl req -new -x509 -nodes -days 365000 -key $CERTDIR/ca-key.pem -out $CERTDIR/ca-cert.pem

    sudo openssl req -newkey rsa:2048 -days 365000 -nodes -keyout $CERTDIR/server-key.pem -out $CERTDIR/server-req.pem
    sudo openssl rsa -in $CERTDIR/server-key.pem -out $CERTDIR/server-key.pem
    sudo openssl x509 -req -in $CERTDIR/server-req.pem -days 365000 -CA $CERTDIR/ca-cert.pem -CAkey $CERTDIR/ca-key.pem -set_serial 01 -out $CERTDIR/server-cert.pem

    sudo openssl req -newkey rsa:2048 -days 365000 -nodes -keyout $CERTDIR/client-key.pem -out $CERTDIR/client-req.pem
    sudo openssl rsa -in $CERTDIR/client-key.pem -out $CERTDIR/client-key.pem
    sudo openssl x509 -req -in $CERTDIR/client-req.pem -days 365000 -CA $CERTDIR/ca-cert.pem -CAkey $CERTDIR/ca-key.pem -set_serial 01 -out $CERTDIR/client-cert.pem

    openssl verify -CAfile $CERTDIR/ca-cert.pem $CERTDIR/server-cert.pem $CERTDIR/client-cert.pem
    cat $_MYSQLDIR/ssl/10-ssl.cnf | sudo tee /etc/mysql/conf.d/10-ssl.cnf

    sudo chown -R mysql:root $CERTDIR
}
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("php:composer:install")
--php:composer:install() {
    cd ~
    curl -sS https://getcomposer.org/installer -o composer-setup.php
    HASH=$(curl -sS https://composer.github.io/installer.sig)
    php -r "if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
    php -r "unlink('composer-setup.php');"
    rm -rf composer-setup.php
}
#!/usr/bin/env bash
#!/bin/bash

--php:apt:install() {
    sudo add-apt-repository ppa:ondrej/php -y
    sudo apt update
    # sudo apt install -y php-dev php-xml -y --allow-unauthenticated &>/dev/null
}

_DUCTN_COMMANDS+=("php:install")
--php:install() {
    --php:apt:install

    #!/bin/bash

    # sudo add-apt-repository ppa:ondrej/php
    # sudo apt update
    # sudo apt install libapache2-mod-php?.? -y --purge --auto-remove
    # sudo update-alternatives --config php

    #sudo update-alternatives --set php /usr/bin/php5.6
    #sudo update-alternatives --set phar /usr/bin/phar5.6
    #sudo update-alternatives --set phar.phar /usr/bin/phar.phar5.6
    #sudo update-alternatives --set phpize /usr/bin/phpize5.6
    #sudo update-alternatives --set php-config /usr/bin/php-config5.6

    # INSTALL PHP MODULES
    ########################
    # sudo apt install phpmd -y --purge --auto-remove &>/dev/null
    # sudo apt install composer -y --purge --auto-remove &>/dev/null

    # sudo apt install -y libapache2-mod-php?.? php?.? php?.?-mysql php?.?-mbstring php?.?-mysqli php?.?-intl php?.?-curl php?.?-gd php?.?-mcrypt php?.?-soap php?.?-dom php?.?-xml php?.?-zip php?.?-bcmath php?.?-imagick &>/dev/null
    # sudo apt install -y php?.?-mongodb &>/dev/null
    # ductn_php_mssql
    # sudo service apache2 restart
}

_DUCTN_COMMANDS+=("php:phpcsfixer:install")
--php:phpcsfixer:install() {
    cd ~
    curl -sS https://cs.symfony.com/download/php-cs-fixer-v3.phar -o php-cs-fixer
    if [ "$(whoami)" = "ductn" ]; then
        chmod +x php-cs-fixer
        sudo mv php-cs-fixer /usr/local/bin/php-cs-fixer
        sudo chown root:root /usr/local/bin/php-cs-fixer
    fi
}
#!/usr/bin/env bash
#!/bin/bash

####################################
#
# SSH
#
####################################
# Create PEM file
# ##############################
#
# openssl rsa -in id_rsa -outform PEM -out id_rsa.pem
# openssl x509 -outform der -in id_rsa.pem -out id_rsa.crt

# Change passphrase
# ##############################
# SYNOPSIS
# #ssh-keygen [-q] [-b bits] -t type [-N new_passphrase] [-C comment] [-f output_keyfile]
# #ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]
# #-f filename Specifies the filename of the key file.
# -N new_passphrase     Provides the new passphrase.
# -P passphrase         Provides the (old) passphrase.
# -p                    Requests changing the passphrase of a private key file instead of
#                       creating a new private key.  The program will prompt for the file
#                       containing the private key, for the old passphrase, and twice for
#                       the new passphrase.
#
# ssh-keygen -t rsa -y > ~/.ssh/id_rsa.pub
# ssh-keygen -f id_rsa -p

# Setup
# ##############################
_DUCTN_COMMANDS+=("ssh:install")
--ssh:install() {
    # ssh config
    cat /var/www/base/ssh/config >~/.ssh/config
    printf "\n\n" >>~/.ssh/config
    find /var/www/base/ssh/config.d/*.conf -type f -exec cat {} \; -exec printf "\n\n" \; >>~/.ssh/config

    # ssh private key
    cat /var/www/base/ssh/id_rsa >~/.ssh/id_rsa
    # cat /var/www/base/ssh/gss > ~/.ssh/gss
    # cat /var/www/base/ssh/tci > ~/.ssh/tci
    # cat /var/www/base/ssh/gem > ~/.ssh/gem

    # ssh public key
    ssh-keygen -f ~/.ssh/id_rsa -y >~/.ssh/id_rsa.pub
    # ssh-keygen -f ~/.ssh/gss -y > ~/.ssh/gss.pub
    # ssh-keygen -f ~/.ssh/tci -y > ~/.ssh/tci.pub
    # ssh-keygen -f ~/.ssh/gem -y > ~/.ssh/gem.pub
    --ssh:permision

    # ssh-copy-id user@123.45.56.78

    # cat /var/www/base/ssh/id_rsa        | ssh dx1.diepxuan.com "cat > ~/.ssh/id_rsa"
    # cat /var/www/base/ssh/id_rsa.pub    | ssh dx1.diepxuan.com "cat > ~/.ssh/id_rsa.pub"
    # ssh dx1.diepxuan.com "chmod 600 ~/.ssh/*"
}

--ssh:permision() {
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    chmod 600 ~/.ssh/*
}

_DUCTN_COMMANDS+=("ssh:copy")
--ssh:copy() {
    cat /var/www/base/ssh/id_rsa | ssh ${1} "cat > ~/.ssh/id_rsa"
    ssh ${1} "chmod 600 ~/.ssh/*"
    ssh ${1} "ssh-keygen -f ~/.ssh/id_rsa -y >~/.ssh/id_rsa.pub"
    # cat /var/www/base/ssh/id_rsa.pub | ssh ${1} "cat > ~/.ssh/id_rsa.pub"
}
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("ssl:install")
--ssl:install() {
    sudo apt install software-properties-common -y --purge --auto-remove
    # sudo add-apt-repository universe
    # sudo add-apt-repository ppa:certbot/certbot
    sudo apt update
    sudo apt install -y --purge --auto-remove python3-pip
    # sudo pip3 install certbot certbot-dns-cloudflare
    sudo apt install -y --purge --auto-remove certbot python3-certbot-dns-cloudflare
}

_DUCTN_COMMANDS+=("ssl:configure")
--ssl:configure() { --ssl:setup; }

--ssl:setup() {

    #sudo certbot certonly --apache \
    #  --expand \
    #  --no-redirect \
    #  --keep-until-expiring \
    #  --break-my-certs \
    #  --pre-hook /var/www/base/bash/certbot/authenticator.sh \
    #  -m caothu91@gmail.com \
    #  --server https://acme-v02.api.letsencrypt.org/directory

    #_certbot solzatech.com,www.solzatech.com
    # _certbot diepxuan.com,www.diepxuan.com,luong.diepxuan.com,pma.diepxuan.com,cloud.diepxuan.com,work.diepxuan.com,shop.diepxuan.com
    --ssl:certbot diepxuan.com,*.diepxuan.com
    --ssl:certbot vps.diepxuan.com,*.vps.diepxuan.com

    sudo service apache2 restart

    #  sudo cat /etc/letsencrypt/live/mail.diepxuan.com/fullchain.pem | ssh server3.diepxuan.com "sudo tee /etc/letsencrypt/live/mail.diepxuan.com/fullchain.pem"
    #  sudo cat /etc/letsencrypt/live/mail.diepxuan.com/privkey.pem | ssh server3.diepxuan.com "sudo tee /etc/letsencrypt/live/mail.diepxuan.com/privkey.pem"

    # sudo scp -r /etc/letsencrypt/live/* dx3.diepxuan.com:/etc/letsencrypt/live/
}

--ssl:certbot() {

    chmod 600 /var/www/base/bash/certbot/cloudflare.ini

    sudo certbot certonly \
        --expand \
        --keep-until-expiring \
        --dns-cloudflare \
        --dns-cloudflare-credentials /var/www/base/bash/certbot/cloudflare.ini \
        --agree-tos \
        --email caothu91@gmail.com \
        --eff-email \
        -d $@
}

--ssl:pull() {
    sudo mkdir -p /etc/letsencrypt/live/diepxuan.com/
    ssh "$@" "sudo cat /etc/letsencrypt/live/diepxuan.com/cert.pem" | sudo tee /etc/letsencrypt/live/diepxuan.com/cert.pem
    ssh "$@" "sudo cat /etc/letsencrypt/live/diepxuan.com/chain.pem" | sudo tee /etc/letsencrypt/live/diepxuan.com/chain.pem
    ssh "$@" "sudo cat /etc/letsencrypt/live/diepxuan.com/fullchain.pem" | sudo tee /etc/letsencrypt/live/diepxuan.com/fullchain.pem
    ssh "$@" "sudo cat /etc/letsencrypt/live/diepxuan.com/privkey.pem" | sudo tee /etc/letsencrypt/live/diepxuan.com/privkey.pem
}

--ssl:push() {
    sudo cat /etc/letsencrypt/live/diepxuan.com/cert.pem | ssh "$@" "sudo tee /etc/letsencrypt/live/diepxuan.com/cert.pem"
    sudo cat /etc/letsencrypt/live/diepxuan.com/chain.pem | ssh "$@" "sudo tee /etc/letsencrypt/live/diepxuan.com/chain.pem"
    sudo cat /etc/letsencrypt/live/diepxuan.com/fullchain.pem | ssh "$@" "sudo tee /etc/letsencrypt/live/diepxuan.com/fullchain.pem"
    sudo cat /etc/letsencrypt/live/diepxuan.com/privkey.pem | ssh "$@" "sudo tee /etc/letsencrypt/live/diepxuan.com/privkey.pem"
}

--ssl:upload() {
    --push
}
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("swap:remove")
--swap:remove() {
    sudo swapoff -v /swapfile
    sudo rm /swapfile
    exit 0
}

_DUCTN_COMMANDS+=("swap:install")
--swap:install() {
    --swap:remove
    sudo rm -rf /swapfile
    sudo fallocate -l 2G /swapfile
    sudo chmod 600 /swapfile
    sudo mkswap /swapfile
    sudo swapon /swapfile
}

# free -m

_DUCTN_COMMANDS+=("sys:apt:fix")
--sys:apt:fix() {
    --apt:fix
}

_DUCTN_COMMANDS+=("sys:apt:check")
--sys:apt:check() {
    dpkg -s $1 2>/dev/null | grep 'install ok installed' >/dev/null 2>&1
    if [ $? != 0 ]; then
        echo 0
    else
        echo 1
    fi

    # REQUIRED_PKG=$1
    # PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $REQUIRED_PKG | grep "install ok installed")
    # # echo Checking for $REQUIRED_PKG: $PKG_OK
    # if [ "" = "$PKG_OK" ]; then
    #     #     echo "No $REQUIRED_PKG. Setting up $REQUIRED_PKG."
    #     #     sudo apt-get --yes install $REQUIRED_PKG
    #     echo 0
    # else
    #     echo 1
    # fi

}

_DUCTN_COMMANDS+=("sys:apt:install")
--sys:apt:install() {
    if [[ "$(--sys:apt:check $*)" -eq 0 ]]; then
        sudo apt install $* -y --purge --auto-remove
    fi
}

_DUCTN_COMMANDS+=("sys:apt:remove")
--sys:apt:remove() {
    sudo apt remove $* -y --purge --auto-remove
}

_DUCTN_COMMANDS+=("sys:apt:uninstall")
--sys:apt:uninstall() {
    --sys:apt:remove $*
}

--apt:fix() {
    #!/bin/bash

    sudo killall apt-get
    sudo killall apt

    sudo rm /var/lib/apt/lists/lock
    sudo rm /var/cache/apt/archives/lock
    sudo rm /var/lib/dpkg/lock
    sudo rm /var/lib/dpkg/lock-frontend

    sudo dpkg --configure -a
}

_DUCTN_COMMANDS+=("sys:upgrade" "selfupdate")
--selfupdate() { --sys:upgrade; }
--sys:upgrade() {
    sudo apt install --only-upgrade ductn -y --purge --auto-remove
    ductn sys:init
    ductn sys:service:re-install
}

_DUCTN_COMMANDS+=("sys:completion" "sys:completion:commands")

--sys:completion() {
    [ $(--sys:completion:exists ductn) ] && --sys:completion:base
    [ $(--sys:completion:exists magerun) ] && --sys:completion:magerun
    [ $(--sys:completion:exists magerun2) ] && --sys:completion:magerun2
    [ $(--sys:completion:exists wp) ] && --sys:completion:wp
    [ $(--sys:completion:exists angular) ] && --sys:completion:angular
}

--sys:completion:base() {
    # bash completion for the `ductn cli` command
    # ################################################################
    if ! shopt -oq posix; then
        if [[ -f /var/www/base/bash/completion/ductn.sh ]]; then
            echo /var/www/base/bash/completion/ductn.sh
        elif [[ -f $HOME/.completion/ductn.sh ]]; then
            echo $HOME/.completion/ductn.sh
        fi
    fi
}

--sys:completion:magerun() {
    # completion magerun
    # ################################################################
    # https://raw.githubusercontent.com/netz98/n98-magerun/develop/res/autocompletion/bash/n98-magerun.phar.bash
    if ! shopt -oq posix; then
        if [[ -f /var/www/base/bash/completion/magerun.sh ]]; then
            echo /var/www/base/bash/completion/magerun.sh
        elif [[ -f $HOME/.completion/magerun.sh ]]; then
            echo $HOME/.completion/magerun.sh
        fi
    fi
}
--sys:completion:magerun2() {
    # completion magerun2
    # ################################################################
    # https://raw.githubusercontent.com/netz98/n98-magerun2/develop/res/autocompletion/bash/n98-magerun2.phar.bash
    if ! shopt -oq posix; then
        if [[ -f /var/www/base/bash/completion/magerun2.sh ]]; then
            echo /var/www/base/bash/completion/magerun2.sh
        elif [[ -f $HOME/.completion/magerun2.sh ]]; then
            echo $HOME/.completion/magerun2.sh
        fi
    fi
}

--sys:completion:wp() {
    # bash completion for the `wp` command
    # ################################################################
    if ! shopt -oq posix; then
        if [[ -f /var/www/base/bash/completion/wp.sh ]]; then
            echo /var/www/base/bash/completion/wp.sh
        elif [[ -f $HOME/.completion/wp.sh ]]; then
            echo $HOME/.completion/wp.sh
        fi
    fi
}

--sys:completion:angular() {
    # bash completion for the `angular cli` command
    # ################################################################
    if ! shopt -oq posix; then
        if [[ -f /var/www/base/bash/completion/angular2.sh ]]; then
            echo /var/www/base/bash/completion/angular2.sh
        elif [[ -f $HOME/.completion/angular2.sh ]]; then
            echo $HOME/.completion/angular2.sh
        fi
    fi
}

--sys:completion:commands() {
    echo "${_DUCTN_COMMANDS[*]}"
}

--sys:completion:exists() {
    [ ! -x "$(command -v $@)" ] && echo 0 || echo 1
}
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("sys:dhcp:setup")
--sys:dhcp:setup() {
    if [ $(--host:is_server) = 1 ]; then
        --sys:apt:install isc-dhcp-server

        --sys:dhcp:config
    fi
}

--sys:dhcp:config() {
    _DHCP_DEFAULT=/etc/default/isc-dhcp-server

    ### /etc/default/isc-dhcp-server
    sudo sed -i 's/INTERFACES=.*/INTERFACES="vmbr1"/' $_DHCP_DEFAULT >/dev/null
    sudo sed -i 's/INTERFACESv4=.*/INTERFACESv4="vmbr1"/' $_DHCP_DEFAULT >/dev/null
    # sudo sed -i 's/INTERFACESv6=.*/INTERFACESv6="vmbr1"/' $_DHCP_DEFAULT >/dev/null

    ### /etc/dhcp/dhcpd.conf
    [ ! -f /etc/dhcp/dhcpd.conf.org ] && sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.org
    echo -e "$_DHCPD_CONF" | sudo tee /etc/dhcp/dhcpd.conf >/dev/null

    sudo killall dhcpd
    sudo rm -rf /var/run/dhcpd.pid
    --sys:service:restart isc-dhcp-server
}
_DHCPD_HOST=$(--host:name)
_DHCPD_HOST=${_DHCPD_HOST:3}
_DHCPD_CONF="option domain-name \"diepxuan.com\";
option domain-search \"diepxuan.com\";
option domain-name-servers 1.1.1.1, 10.0.1.10, 10.0.2.10;

default-lease-time 600;
max-lease-time 7200;

ddns-update-style none;
authoritative;

one-lease-per-client true;
deny duplicates;
update-conflict-detection false;

subnet 10.0.$_DHCPD_HOST.0 netmask 255.255.255.0 {
    pool {
        option domain-name-servers 1.1.1.1,10.0.1.10,10.0.2.10;
        range 10.0.$_DHCPD_HOST.150 10.0.$_DHCPD_HOST.199;
    }

    option domain-name-servers 1.1.1.1,10.0.1.10,10.0.2.10;

    option routers 10.0.$_DHCPD_HOST.1;
    option subnet-mask 255.255.255.0;

    ping-check true;
}

host dc1 {
    hardware ethernet ba:1f:4a:6a:63:a1;
    fixed-address 10.0.1.10;
    option host-name \"dc1\";
}

host dc2 {
    hardware ethernet 62:F0:9D:12:02:61;
    fixed-address 10.0.2.10;
    option host-name \"dc2\";
}

host sql1 {
    hardware ethernet ae:fa:53:5f:00:f1;
    fixed-address 10.0.1.11;
    option host-name \"sql1\";
}

host sql2 {
    hardware ethernet 16:13:D5:80:B3:58;
    fixed-address 10.0.2.11;
    option host-name \"sql2\";
}
"
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("sys:disk:check")
--sys:disk:check() {
    --sys:disk:check8k
    --sys:disk:check512k
}

_DUCTN_COMMANDS+=("sys:disk:check8k")
--sys:disk:check8k() {
    dd if=/dev/zero of=/tmp/output bs=8k count=10k
    rm -f /tmp/output
}

_DUCTN_COMMANDS+=("sys:disk:check512k")
--sys:disk:check512k() {
    dd if=/dev/zero of=/tmp/output bs=512k count=1k
    rm -f /tmp/output
}

--zfs:disk:list() {
    ls -alh /dev/disk/by-id/
    sudo zpool status
    sudo zpool list -v
}

--zfs:disk:offline() {
    # sudo zpool offline "POOLNAME" "HARD-DRIVE-ID or the whole path"
    # sudo zpool offline rpool ata-HITACHI_HUA722010ALA330_J80TS2LL
    sudo zpool offline rpool $@
}

--zfs:disk:replace() {
    sudo proxmox-boot-tool status
}
--zfs:disk:replace_disk() {
    --logger "replace_disk $_pool_name $_old_zfs_part $_new_zfs_part"
    _pool_name=$1
    _old_zfs_part=$2
    _new_zfs_part=$3
    sudo zpool replace -f $_pool_name $_old_zfs_part $_new_zfs_part
}

--zfs:disk:replace_boot_disk() {
    --logger "replace_boot_disk"
    # Copying the partition table, reissuing GUIDs and replacing the ZFS partition are the same.
    # To make the system bootable from the new disk, different steps are needed which depend on the bootloader in use.

    # sudo sgdisk /dev/disk/by-id/ata-TOSHIBA_MQ01ABD100_48MFT0FZT -R /dev/disk/by-id/ata-HGST_HTS721010A9E630_JR100XBN1LH00E
    # sudo sgdisk -G /dev/disk/by-id/ata-HGST_HTS721010A9E630_JR100XBN1LH00E
    # sudo zpool replace -f rpool /dev/disk/by-id/ata-HITACHI_HUA722010ALA330_J80TS2LL-part3 /dev/disk/by-id/ata-HGST_HTS721010A9E630_JR100XBN1LH00E-part3
}

--zfs:disk:format_boot_disk() {
    --logger "format_boot_disk"
    # ESP stands for EFI System Partition, which is setup as partition #2 on bootable disks setup by the Proxmox

    # sudo proxmox-boot-tool format /dev/sdb2
}

--test() {
    echo -e "ductn proccess version: $(--version)"
}
---T() { --test; }
--exists() {
    # nothing to do
    echo '' 1>&3
}
--do_no_thing() { --exists; }

--pwd() {
    echo $_BASEDIR
}

--logger() {
    logger "$@"
}

--echo() {
    echo -e "$@" 2>/dev/null
}

# copy from https://gist.github.com/irazasyed/a7b0a079e7727a4315b9

_DUCTN_COMMANDS+=("hosts:remove")
--hosts:remove() {
    --sys:hosts:remove $1 $2
}

_DUCTN_COMMANDS+=("hosts:add")
--hosts:add() {
    --sys:hosts:add $1 $2
}

_DUCTN_COMMANDS+=("hosts")
--hosts() {
    "--hosts:$*"
}

ETC_HOSTS=/etc/hosts

# sed -i 's/var=.*/var=new_value/' file_name

_DUCTN_COMMANDS+=("sys:hosts:add")
--sys:hosts:add() {
    IP=$1
    HOSTNAME=$2

    HOSTS_LINE="$IP\t$HOSTNAME"

    if [[ ! -n $(grep -P "${IP}[[:space:]]${HOSTNAME}" $ETC_HOSTS) ]]; then
        echo -e $HOSTS_LINE | sudo tee -a /etc/hosts >/dev/null
    fi

    # [[ -n $(grep -P "$IP[[:space:]]$HOSTNAME" $ETC_HOSTS) ]] && echo ">> Hosts added: $(grep $HOSTNAME $ETC_HOSTS)" || echo "Failed to Add $HOSTNAME, Try again!"
}

_DUCTN_COMMANDS+=("sys:hosts:remove")
--sys:hosts:remove() {
    IP=$1
    HOSTNAME=$2

    sudo sed -i "/$HOSTNAME/d" $ETC_HOSTS
    # grep -P "pve2.vpn" | sudo tee $ETC_HOSTS

    # [[ -n "$(grep $HOSTNAME /etc/hosts)" ]] && echo ">> Hosts removed: $HOSTNAME" || echo "$HOSTNAME was not found!"
}

_DUCTN_COMMANDS+=("sys:hosts:domain")
--sys:hosts:domain() {
    IP=$(--ip:wan)
    HOSTNAME="$(--host:fullname) $(--host:name)"
    HOSTS_LINE="$IP\\t$HOSTNAME"
    echo -e $HOSTS_LINE
}

_DUCTN_COMMANDS+=("sys:hosts:update")
--sys:hosts:update() {
    sed -i 's/var=.*/var=new_value/' ${ETC_HOSTS}
}
#!/usr/bin/env bash
#!/bin/bash

--sys:service:httpd() {
    if [ "$(--sys:service:isactive apache2)" == "failed" ]; then
        --swap:install
        --log:cleanup
        --sys:service:restart apache2
    fi

    # sudo /usr/sbin/service apache2 status | grep 'active' >/dev/null 2>&1
    # if [ $? != 0 ]; then
    #     sudo /usr/sbin/service apache2 start
    # fi
}

--sys:service:mysql() {
    if [ "$(--sys:service:isactive mysql)" == "failed" ]; then
        --swap:install
        --log:cleanup
        --sys:service:restart mysql
    fi

    # sudo /usr/sbin/service mysql status | grep 'active' >/dev/null 2>&1
    # if [ $? != 0 ]; then
    #     --swap:install
    #     --log:cleanup
    #     sudo /usr/sbin/service mysql start
    # fi
}

--sys:service:mssql() {
    if [ "$(--sys:service:isactive mssql-server)" == "failed" ]; then
        --swap:install
        --log:cleanup
        --sys:service:restart mssql-server
    fi

    # sudo /usr/sbin/service mssql-server status | grep 'active' >/dev/null 2>&1
    # if [ $? != 0 ]; then
    #     --swap:install
    #     --log:cleanup
    #     sudo /usr/sbin/service mssql-server start
    # fi
}

--sys:service:ufw() {
    if [ "$(--sys:service:isactive ufw)" == "failed" ]; then
        [[ $(--sys:ufw:is_exist) -eq 1 ]] && sudo ufw enable
    fi

    # sudo ufw status | grep ' active' >/dev/null 2>&1
    # if [ $? != 0 ]; then
    #     sudo ufw enable
    # fi
}

--sys:service:vpn() {
    if [[ "$(--vpn:type)" == "client" ]]; then
        _SERVICE="openvpn@$(--host:name).service"
        if [ "$(--sys:service:isactive $_SERVICE)" == "failed" ]; then
            --vpn:init
            --sys:service:restart $_SERVICE
        fi
    fi

    if [[ "$(--vpn:type)" == "server" ]]; then
        _SERVICE="openvpn-server@server.service"
        if [ "$(--sys:service:isactive $_SERVICE)" == "failed" ]; then
            --vpn:init
            --sys:service:restart $_SERVICE
        fi
    fi

    # sudo ufw status | grep ' active' >/dev/null 2>&1
    # if [ $? != 0 ]; then
    #     sudo ufw enable
    # fi
}

--sys:service:dhcp() {
    if [ $(--host:is_server) = 1 ] && [ "$(--sys:service:isactive isc-dhcp-server)" == "failed" ]; then
        sudo killall dhcpd
        sudo rm -rf /var/run/dhcpd.pid
        --sys:service:restart isc-dhcp-server
    fi
}
#!/usr/bin/env bash
#!/bin/bash

--sys:service:cron() {
    if [ "$(--sys:service:isactive)" == "active" ]; then
        --cron:crontab:uninstall >/dev/null 2>&1
    fi

    --sys:service:httpd
    --sys:service:mysql
    --sys:service:mssql
    --sys:service:ufw
    --sys:service:vpn
}
#!/usr/bin/env bash
#!/bin/bash

--sys:service:main() {
    timer=0
    while true; do
        sleep 1
        ((timer += 1))
        timer=$(($timer % 100000))
        # // Your statements go here

        if [ $(($timer % 30)) = 0 ]; then
            --cron:cronjob:min
        fi

        if [ $(($timer % 300)) = 0 ]; then
            --cron:cronjob:5min
        fi

        if [ $(($timer % 3600)) = 0 ]; then
            --cron:cronjob:hour
        fi

        # case "$timer" in

        # 60)
        #     --cron:cronjob:min
        #     ((timer += 1))
        #     ;;

        # esac
    done

    read -t 5 -n 1 -s -r -p "Press any key to continue (5 seconds)"
}

_DUCTN_COMMANDS+=("run_as_service")
--run_as_service() {
    --sys:service:main
}

_DUCTN_COMMANDS+=("sys:service:isactive")
--sys:service:isactive() { #SERVICE_NAME
    _SERVICE_NAME=$SERVICE_NAME
    if [[ ! -z ${@+x} ]]; then
        _SERVICE_NAME="$@"
    fi
    IS_ACTIVE=$(sudo systemctl is-active $_SERVICE_NAME)
    echo $IS_ACTIVE
}

_DUCTN_COMMANDS+=("sys:service:restart")
--sys:service:restart() { #SERVICE_NAME
    _SERVICE_NAME=$SERVICE_NAME
    if [[ ! -z ${@+x} ]]; then
        _SERVICE_NAME="$@"
    fi
    if [ ! "$(--sys:service:isactive $_SERVICE_NAME)" == "inactive" ]; then
        sudo systemctl stop ${_SERVICE_NAME//'.service'/}
        sudo systemctl restart ${_SERVICE_NAME//'.service'/}
    fi
}

_DUCTN_COMMANDS+=("sys:service:re-install")
--sys:service:re-install() {
    --sys:service:unistall
    --sys:service:install
}

# _DUCTN_SERVICE

_DUCTN_COMMANDS+=("sys:service:install")
--sys:service:install() {
    # sudo systemctl daemon-reload
    if [ "$(--sys:service:isactive)" == "failed" ]; then
        --sys:service:unistall
    fi

    if [ "$(--sys:service:isactive)" == "inactive" ] || [ "$(--sys:service:isactive)" == "failed" ]; then
        # restart the service
        #     echo "Service is running"
        #     echo "Restarting service"
        #     sudo systemctl restart $SERVICE_NAME
        #     echo "Service restarted"
        # else

        # create service file
        # echo "Creating service file"
        echo -e "[Unit]
Description=${SERVICE_DESC//'"'/}
After=network-online.target network.target

[Service]
ExecStart=${SERVICE_PATH//'"'/}
User=ductn
WorkingDirectory=$_BASEDIR

# Kill root process
KillMode=process

# Wait up to 30 minutes for service to start/stop
TimeoutSec=1min

# Remove process, file, thread limits
#
LimitNPROC=infinity
LimitNOFILE=infinity
TasksMax=infinity
UMask=007
# Restart on non-successful exits.
Restart=on-failure

# Don't restart if we've restarted more than 10 times in 1 minute.
StartLimitInterval=60
StartLimitBurst=10

RestartSec=5s
# Type=notify
# SyslogIdentifier=Diskutilization

[Install]
WantedBy=multi-user.target
Alias=${SERVICE_NAME//'"'/}.service\n" | sudo tee /usr/lib/systemd/system/${SERVICE_NAME//'"'/}.service >/dev/null 2>&1
        # ls -la /usr/lib/systemd/system/ | grep ductn
        # ls -la /etc/systemd/system/ | grep ductn
        # restart daemon, enable and start service
        # echo "Reloading daemon and enabling service"
        sudo systemctl daemon-reload
        sudo systemctl enable ${SERVICE_NAME//'.service'/} # remove the extension
        sudo systemctl restart ${SERVICE_NAME//'.service'/}
        # sudo systemctl status ${SERVICE_NAME//'.service'/}
    # echo "Service Started"
    # echo "aaa" | sudo tee /etc/systemd/system/ductn.service
    fi
}

_DUCTN_COMMANDS+=("sys:service:uninstall")
--sys:service:unistall() {
    sudo systemctl kill ${SERVICE_NAME//'.service'/}    # remove the extension
    sudo systemctl stop ${SERVICE_NAME//'.service'/}    # remove the extension
    sudo systemctl disable ${SERVICE_NAME//'.service'/} # remove the extension
    sudo rm -rf /etc/systemd/system/*${SERVICE_NAME//'"'/}.service
    sudo rm -rf /usr/lib/systemd/system/*${SERVICE_NAME//'"'/}.service
}
#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("sys:init")
--sys:init() {
    sudo timedatectl set-timezone Asia/Ho_Chi_Minh

    --user:config $(whoami)

    --sys:sysctl >/dev/null
    --ufw:iptables >/dev/null
    --git:configure

    --server() {
        --cron:install
        --httpd:config
        --ssh:install
    }

    if [[ -n "$*" ]]; then
        "--$*"
    fi
}

_DUCTN_COMMANDS+=("sys:sysctl")
--sys:sysctl() {
    _sysctl="fs.inotify.max_user_watches=524288
net.ipv4.ip_forward=1"

    while IFS= read -r rule; do
        sudo sysctl -w $rule
    done <<<"$_sysctl"

    echo "$_sysctl" | sudo tee /etc/sysctl.d/99-ductn.conf
    sudo sysctl -p
}

#!/usr/bin/env bash
#!/bin/bash

_DUCTN_COMMANDS+=("ufw:cleanup")
--ufw:cleanup() {
    TYPE=$1
    DDNS_IPS=()

    for domain in $(--sys:env:domains); do
        IP="$(--host:address $domain)"
        DDNS_IPS+=($IP)
    done

    sudo ufw status numbered | sed -n '/Anywhere[[:space:]]\+ALLOW IN[[:space:]]\+/p' | while read line; do
        line="$(echo "$line" | sed -r 's/[[:space:]*[0-9]+][[:space:]]Anywhere[[:space:]]+ALLOW IN[[:space:]]+//g')"
        line="$(echo "$line" | sed -r 's/\/tcp//g')"

        if [[ " ${DDNS_IPS[*]} " =~ " ${line} " ]]; then
            [[ $TYPE =~ "cmd" ]] && --echo "Exist $line"
        else
            # sudo ufw delete allow proto tcp from "$line"
            sudo ufw delete allow from "$line"
            [[ $TYPE =~ "cmd" ]] && --echo "Remove $line"
        fi

    done
}

_DUCTN_COMMANDS+=("ufw:profile:mssql")
--ufw:profile:mssql() {
    echo -e "$ufw_profile_mssql" | sudo tee /etc/ufw/applications.d/mssql.ufw.profile >/dev/null
}

ufw_profile_mssql="[SQLServer]
title=SQLServer
description=SQLServer server.
ports=1433/tcp|1434/udp
"
#!/usr/bin/env bash
#!/bin/bash

# options_found=0
# while getopts ":u" opt; do
#     options_found=1
#     case $opt in
#     u)
#         username=$OPTARG
#         echo "username = $OPTARG"
#         ;;
#     esac
# done

# if ((!options_found)); then
#     echo "no options found"
# fi

_SSHDIR="$_LIBDIR/ssh"

_DUCTN_COMMANDS+=("user:new")
--user:new() {
    #!/bin/bash

    sudo adduser ${1} --disabled-password --gecos \"\"
    sudo adduser ${1} www-data
    sudo usermod -aG www-data ${1}
    id -u ${1}

    --user:config ${1}
}

_DUCTN_COMMANDS+=("user:config")
--user:config() {
    if [[ ${1} = "ductn" ]]; then
        --user:config:ssh ${1}
        --user:config:admin

        sudo usermod -aG mssql ${1} >/dev/null 2>&1
    fi

    --user:config:bash ${1}
    --user:config:chmod ${1}
}

--user:config:bash() {
    sudo sed -i 's/.*force_color_prompt\=.*/force_color_prompt\=yes/' /home/${1}/.bashrc >/dev/null
}

--user:config:ssh() {
    sudo mkdir -p /home/${1}/.ssh

    cat $_SSHDIR/id_rsa | sudo tee /home/${1}/.ssh/id_rsa >/dev/null
    cat $_SSHDIR/id_rsa.pub | sudo tee /home/${1}/.ssh/id_rsa.pub >/dev/null
    cat $_SSHDIR/id_rsa.pub | sudo tee --append /home/${1}/.ssh/authorized_keys >/dev/null

    sudo chown -R ${1}:${1} /home/${1}/.ssh
}

--user:config:chmod() {
    sudo chmod 755 /home/${1}

    sudo mkdir -p /home/${1}/.ssh
    sudo chmod 777 /home/${1}/.ssh

    sudo chmod -R 600 /home/${1}/.ssh
    sudo chmod 700 /home/${1}/.ssh
    sudo chown -R ${1}:${1} /home/${1}/.ssh

    sudo chmod 644 /home/${1}/.bash_aliases
    sudo chown -R ${1}:${1} /home/${1}/.bash_aliases

    sudo mkdir -p /home/${1}/public_html
    sudo chmod 755 /home/${1}/public_html
    sudo chown -R ${1}:www-data /home/${1}/public_html

    sudo mkdir -p /home/${1}/.ssl
    sudo chown -R ${1}:${1} /home/${1}/.ssl
}

--user:config:admin() {
    echo "ductn ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/90-users >/dev/null
}
#!/usr/bin/env bash
#!/bin/bash

--version() {
    echo $(cat $_BASEDIR/version)
}

---v() {
    --version
}

--version:latest() {
    git archive --remote=git@bitbucket.org:DXVN/code.git master version | tar -xOf - >$DIRTMP/version
    echo $(cat $DIRTMP/version)
}

--version:islatest() {
    [[ "$(--version)" == "$(--version:latest)" ]] && echo 1 || echo 0
}
#!/usr/bin/env bash
#!/bin/bash

# _VPN_PATH=~/easy-rsa
_IPTUNEL="pve2:34.170.109.33"

_DUCTN_COMMANDS+=("vpn:init")
--vpn:init() {
    for vpn in $(--sys:env:list _IPTUNEL); do
        IFS=':' read -r -a array <<<$vpn
        hostname="${array[0]}"
        address="${array[1]}"

        --hosts:add $address "$hostname.vpn"

        [[ $(--host:name) == $hostname ]] && [[ "$(--vpn:type)" == "server" ]] && --vpn:server:init $hostname
        [[ $(--host:name) == $hostname ]] && [[ "$(--vpn:type)" == "client" ]] && --vpn:client:init $address $hostname
    done
}

--vpn:server:init() {
    hostname=$@

    if [ "$(--sys:service:isactive "openvpn-server@server.service")" == "inactive" ]; then
        # --vpn:openvpn
        echo -e "Please run command 'ductn vpn:openvpn'"

        # sudo openvpn --genkey --secret /etc/openvpn/server/ta.key
        #         echo -e "# Site-to-site
        # client-config-dir /etc/openvpn/ccd
        # tls-auth ta.key 0" | sudo tee -a /etc/openvpn/server/server.conf
    fi

    # push config to client
    if [[ -f /etc/openvpn/server/server.conf ]]; then
        sudo mkdir -p /etc/openvpn/ccd
        #     if [[ ! -n $(grep -P "client-config-dir" /etc/openvpn/server/server.conf) ]]; then
        #         echo -e "client-config-dir /etc/openvpn/ccd" | sudo tee -a /etc/openvpn/server/server.conf >/dev/null
        #     else
        #         sudo sed -i 's/client-config-dir .*/client-config-dir \/etc\/openvpn\/ccd/' /etc/openvpn/server/server.conf >/dev/null
        #     fi
        echo "ifconfig-push 10.8.0.2 255.255.255.0" | sudo tee /etc/openvpn/ccd/$hostname >/dev/null
    fi

}

--vpn:client:init() {
    address=$1
    hostname=$2
    --sys:apt:install openvpn
    sudo sed -i 's/.*AUTOSTART="all".*/AUTOSTART="all"/' /etc/default/openvpn >/dev/null

    ssh $address "sudo cat /root/$hostname.ovpn" | sudo tee /etc/openvpn/$hostname.conf >/dev/null

    # sudo openvpn --config ~/$hostname.ovpn
    # sudo cp ~/$hostname.ovpn /etc/openvpn/$hostname.conf

    # Authenicate by pass
    # check ‘auth-user-pass’ to ‘auth-user-pass pass’ in ovpn
    # echo -e "<IVPN Account ID>\n<IVPN Account Pass>" | sudo tee /etc/openvpn/pass >/dev/null
    # sudo chmod 400 /etc/openvpn/pass

    sudo systemctl enable openvpn@$hostname.service
    sudo systemctl daemon-reload
    sudo systemctl restart openvpn@$hostname.service

    # --vpn:openvpn
    # cd $_VPN_PATH
    # mkdir -p $_VPN_PATH/pki/reqs/
    # $_VPN_PATH/easyrsa init-pki
    # $_VPN_PATH/easyrsa gen-req server nopass

    # scp $serve:$_VPN_PATH/pki/reqs/server.req $DIRTMP/server.req
    # $_VPN_PATH/easyrsa import-req $DIRTMP/server.req server
    # $_VPN_PATH/easyrsa build-ca
    # $_VPN_PATH/easyrsa sign-req server server

    # [ ! -x "$(command -v autossh)" ] && --sys:apt:install autossh
    # source /etc/network/interfaces.d/*

    # autossh -M 0 -o "ServerAliveInterval 30" -o "ServerAliveCountMax 3" -NTC -o Tunnel=point-to-point -w 0:0 $@ &
    # echo "autossh -M 0 -o \"ServerAliveInterval 30\" -o \"ServerAliveCountMax 3\" -NTC -o Tunnel=point-to-point -w 0:0 $@"
}

--vpn:type() {
    if [[ "$(--host:domain)" == "diepxuan.com" ]]; then
        echo "client"
    elif [[ "$(--host:domain)" == "vpn" ]]; then
        echo "server"
    else
        echo "none"
    fi
}

--vpn:openvpn() {
    [ ! -d $USER_BIN_PATH ] && mkdir -p $USER_BIN_PATH
    if [ -z $(command -v openvpn-ubuntu-installer.sh) ]; then
        wget https://git.io/vpn -O $USER_BIN_PATH/openvpn-ubuntu-installer.sh
        chmod +x $USER_BIN_PATH/openvpn-ubuntu-installer.sh
    fi
    [ ! -z "$(command -v openvpn-ubuntu-installer.sh)" ] && sudo $(command -v openvpn-ubuntu-installer.sh)
}
#!/usr/bin/env bash
#!/bin/bash

--wsl:cli:install() {
    if grep -q Microsoft /proc/version; then
        _wsl:cli:install
    fi
    if grep -q microsoft /proc/version; then
        _wsl:cli:install
    fi
}

_wsl:cli:install() {
    mkdir -p /mnt/c/wslcli/
    # cat /var/www/base/bash/win10/php.bat >/mnt/c/wslcli/php.bat
    cat /var/www/base/bash/win10/composer.bat >/mnt/c/wslcli/composer.bat

    wget https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -O /mnt/c/wslcli/phpcs
    cat /var/www/base/bash/win10/phpcs.bat >/mnt/c/wslcli/phpcs.bat

    wget https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -O /mnt/c/wslcli/phpcbf
    cat /var/www/base/bash/win10/phpcbf.bat >/mnt/c/wslcli/phpcbf.bat

    wget https://cs.symfony.com/download/php-cs-fixer-v3.phar -O /mnt/c/wslcli/php-cs-fixer
    cat /var/www/base/bash/win10/php-cs-fixer.bat >/mnt/c/wslcli/php-cs-fixer.bat

    # cat /var/www/base/bash/win10/node.bat >/mnt/c/wslcli/node.bat
    cat /var/www/base/bash/win10/yarn.bat >/mnt/c/wslcli/yarn.bat

    cat /var/www/base/bash/win10/git.bat >/mnt/c/wslcli/git.bat

    if [[ ! -f "$(which shfmt)" ]]; then
        $(curl -fsSL https://raw.githubusercontent.com/chiefbiiko/shfmt-install/v0.1.0/install.sh | sh) -d .
        chmod +x shfmt
        sudo chown root:root shfmt
        sudo mv shfmt /usr/local/bin/shfmt
    fi
    cat /var/www/base/bash/win10/shfmt.bat >/mnt/c/wslcli/shfmt.bat
}

--install() {
    --sys:apt:install jq
    --sys:apt:install net-tools
    # --sys:apt:install resolvconf

    --sys:service:install
}

main() {
    main:init

    _version="$([ --version:islatest ] && echo ${Green} || echo ${Red})$(--version)${NC}"

    --echo "Server\t\t$(--host:fullname)($(--host:address))"
    --echo "IP\t\t$(--ip:wan)"
    --echo "Version\t\t$_version (latest $(--version:latest))"
    # --host:domain

    # printf "%s " "Press enter to continue"
    # read ans

    # read -t 5 -n 1 -s -r -p "Press any key to continue (5 seconds)"
    # --echo \n
    exit 0
}

main:init() {
    --log:config
}

[[ ! "$(whoami)" -eq "ductn" ]] && exit 1

--init

if [[ ! -z ${@+x} ]]; then
    "--$@"
    exit 0
else
    main
    exit 0
fi

exit 0
