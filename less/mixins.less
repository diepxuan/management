/* --- Custom Mixins --- */
.css-font-color     (@color: false)     when not (@color      = false) {color:           @color;}
.css-font-size      (@size: false)      when not (@size       = false) {font-size:       @size;}
.css-font-weight    (@weight: false)    when not (@weight     = false) {font-weight:     @weight;}
.css-font-style     (@style: false)     when not (@style      = false) {font-style:      @style;}
.css-font-family    (@font: false)      when not (@font       = false) {font-family:     @font;}
.css-text-transform (@transform: false) when not (@transform  = false) {text-transform:  @transform;}

.css-color-rgba(@color, @opacity : 1) {
  @result: rgba( red(@color), green(@color), blue(@color), @opacity );
}

.css-box-sizing (@box) {
  -webkit-box-sizing: @box;
     -moz-box-sizing: @box;
          box-sizing: @box;
}
.css-box-shadow (@shadow) {
  -webkit-box-shadow: @shadow;
     -moz-box-shadow: @shadow;
          box-shadow: @shadow;
}
.css-drop-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
  -webkit-box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
     -moz-box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
          box-shadow: @x @y @blur @spread rgba(0, 0, 0, @alpha);
}
.css-inner-shadow (@x: 0, @y: 1px, @blur: 2px, @spread: 0, @alpha: 0.25) {
  -webkit-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
     -moz-box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
          box-shadow: inset @x @y @blur @spread rgba(0, 0, 0, @alpha);
}
.css-border-radius (@radius: 0) {
  -webkit-border-radius: @radius;
     -moz-border-radius: @radius;
          border-radius: @radius;

  -webkit-background-clip: padding-box;
     -moz-background-clip: padding;
          background-clip: padding-box;
}
.css-border-radiuses (@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
  -webkit-border-bottom-right-radius: @bottomright;
      -moz-border-radius-bottomright: @bottomright;
          border-bottom-right-radius: @bottomright;

  -webkit-border-top-right-radius:    @topright;
      -moz-border-radius-topright:    @topright;
          border-top-right-radius:    @topright;

  -webkit-border-bottom-left-radius:  @bottomleft;
      -moz-border-radius-bottomleft:  @bottomleft;
          border-bottom-left-radius:  @bottomleft;

  -webkit-border-top-left-radius:     @topleft;
      -moz-border-radius-topleft:     @topleft;
          border-top-left-radius:     @topleft;

  -webkit-background-clip: padding-box;
     -moz-background-clip: padding;
          background-clip: padding-box;
}
.css-animation (@animation) {
  -webkit-animation: @animation;
     -moz-animation: @animation;
      -ms-animation: @animation;
       -o-animation: @animation;
          animation: @animation;
}
.css-animation-delay (@delay: 0s) {
  -webkit-animation-delay: @delay;
     -moz-animation-delay: @delay;
      -ms-animation-delay: @delay;
          animation-delay: @delay;
}
.css-transition (@property: all .4s ease-in-out) {
  -webkit-transition: @property;
     -moz-transition: @property;
       -o-transition: @property;
          transition: @property;
}
.css-transition-duration (@duration: 0.2s) {
  -webkit-transition-duration: @duration;
     -moz-transition-duration: @duration;
      -ms-transition-duration: @duration;
       -o-transition-duration: @duration;
          transition-duration: @duration;
}
.css-transition-property (@property: all) {
  -webkit-transition-property: @property;
     -moz-transition-property: @property;
      -ms-transition-property: @property;
       -o-transition-property: @property;
          transition-property: @property;
}
.css-transform (@value) {
  -webkit-transform: @value;
     -moz-transform: @value;
      -ms-transform: @value;
       -o-transform: @value;
          transform: @value;
}
.css-opacity (@opacity:100) {
  -webkit-opacity: @opacity;
     -moz-opacity: @opacity;
       -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(Opacity="@opacity~")";
          opacity: @opacity/100;
           filter: progid:DXImageTransform.Microsoft.Alpha(Opacity=@opacity);
}
.css-blur (@value) {
  -webkit-filter: blur(@value);
     -moz-filter: blur(@value);
      -ms-filter: blur(@value);
       -o-filter: blur(@value);
          filter: blur(@value);
}
.css-backface-visibility (@visibility: hidden) {
  -webkit-backface-visibility: @visibility;
     -moz-backface-visibility: @visibility;
      -ms-backface-visibility: @visibility;
          backface-visibility: @visibility;
}
.css-select-appearance (@appearance: none) {
  -webkit-appearance: @appearance;
     -moz-appearance: @appearance;
          appearance: @appearance;
}
.css-appearance (@appearance: none) {
  .select-appearance(@appearance);

  &::-webkit-inner-spin-button,
  &::-webkit-outer-spin-button {
    .select-appearance(@appearance);
  }
}
.css-input-placeholder (@color: false, @size: false, @weight: false, @style: normal, @font: false, @text-transform: uppercase, @opacity: 100, @letter-spacing: 0) {
  .css-input-placeholder-while(@prefixes: ":-moz", "::-moz", ":-ms-input", "::-webkit-input"; @index: length(@prefixes)) when (@index > 0) {
    .css-input-placeholder-while(@prefixes; (@index - 1));

    @prefix:     extract(@prefixes, @index);
    @class-name: ~"@{prefix}-placeholder";

    &@{class-name} {
      .css-font-color (@color);
      .css-font-size  (@size);
      .css-font-weight(@weight);
      .css-font-style (@style);
      .css-font-family(@font);
      .css-text-transform(@text-transform);
      .css-opacity(@opacity);
      letter-spacing: @letter-spacing;
    }
  }
  .css-input-placeholder-while;
}
.css-calc (@prop, @condition) {
  @{prop}: -webkit-calc(@condition);
  @{prop}:    -moz-calc(@condition);
  @{prop}:      -o-calc(@condition);
  @{prop}:         calc(@condition);
}
.css-text-align (@align: center) {
  -webkit-text-align-last: @align;
     -moz-text-align-last: @align;
          text-align-last: @align;
               text-align: @align;
}
.css-scale (@factor) {
  -webkit-transform: scale(@factor);
     -moz-transform: scale(@factor);
      -ms-transform: scale(@factor);
       -o-transform: scale(@factor);
          transform: scale(@factor);
}
.css-rotate (@factor: 90deg) {
  -webkit-transform: rotate(@factor);
     -moz-transform: rotate(@factor);
      -ms-transform: rotate(@factor);
       -o-transform: rotate(@factor);
          transform: rotate(@factor);
}
.css-skew (@deg, @deg2) {
  -webkit-transform: skew(@deg, @deg2);
     -moz-transform: skew(@deg, @deg2);
      -ms-transform: skew(@deg, @deg2);
       -o-transform: skew(@deg, @deg2);
          transform: skew(@deg, @deg2);
}
.css-translate (@x: 0px, @y: 0px) {
  .css-transform(translate(@x, @y));
}
.css-translate3d (@x, @y: 0, @z: 0) {
  -webkit-transform: translate3d(@x, @y, @z);
     -moz-transform: translate3d(@x, @y, @z);
      -ms-transform: translate3d(@x, @y, @z);
       -o-transform: translate3d(@x, @y, @z);
          transform: translate3d(@x, @y, @z);
}
.css-matrix(@a, @b, @c, @d, @e, @f) {
  .css-transform(matrix(@a, @b, @c, @d, @e, @f));
}
.css-grayscale (@value: 1) {
  -webkit-filter: grayscale(@value);
     -moz-filter: grayscale(@value);
      -ms-filter: grayscale(@value);
       -o-filter: grayscale(@value);
          filter: grayscale(@value);
}

.css-perspective (@value: 1000) {
  -webkit-perspective: @value;
     -moz-perspective: @value;
      -ms-perspective: @value;
          perspective: @value;
}

.css-transform-origin (@x:center, @y:center) {
  -webkit-transform-origin: @x @y;
     -moz-transform-origin: @x @y;
      -ms-transform-origin: @x @y;
       -o-transform-origin: @x @y;
          transform-origin: @x @y;
}

.linear-gradient(@dir: top, @start-color: #eee, @end-color: #aaa) {
  background: -webkit-linear-gradient(@dir, @start-color 0%, @end-color 100%);
  background:    -moz-linear-gradient(@dir, @start-color 0%, @end-color 100%);
  background:     -ms-linear-gradient(@dir, @start-color 0%, @end-color 100%);
  background:      -o-linear-gradient(@dir, @start-color 0%, @end-color 100%);
  background:         linear-gradient(@dir, @start-color 0%, @end-color 100%);
  .linear-gradient-ie(@dir, @start-color, @end-color);

  .linear-gradient-ie(@dir, @start-color, @end-color) when (@dir = top),
    not ( isstring(@dir) ) and ( @dir >= 225 ) and ( @dir < 315 ),
    not ( isstring(@dir) ) and ( @dir >= -135 ) and ( @dir < -45 ) {
      .linear-gradient-ie-filter(@start-color, @end-color, 0);
  }

  .linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = right),
    not ( isstring(@dir) ) and ( @dir >= 135 ) and ( @dir < 225 ),
    not ( isstring(@dir) ) and ( @dir >= -225 ) and ( @dir < -135 ) {
      .linear-gradient-ie-filter(@end-color, @start-color, 1);
  }

  .linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = bottom),
    not ( isstring(@dir) ) and ( @dir >= 45 ) and ( @dir < 135 ),
    not ( isstring(@dir) ) and ( @dir >= -315 ) and ( @dir < -225 ) {
      .linear-gradient-ie-filter(@end-color, @start-color, 0);
  }

  .linear-gradient-ie( @dir, @start-color, @end-color) when (@dir = left),
    not ( isstring(@dir) ) and ( @dir >= 315 ) and ( @dir < 360 ),
    not ( isstring(@dir) ) and ( @dir >= -45 ) and ( @dir < 45 ),
    not ( isstring(@dir) ) and ( @dir < -315 ) and ( @dir >= -360 ) {
      .linear-gradient-ie-filter(@start-color, @end-color, 1);
  }

  .linear-gradient-ie-filter(@start: #eee, @end: #aaa, @type: 1) {
    @c-start: argb(@start);
    @c-end:   argb(@end);
    filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{c-start}', endColorstr='@{c-end}', GradientType=@{type})";
    -ms-filter: ~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{c-start}',endColorstr='@{c-end}',GradientType=@{type})";
  }
}

.css-vertical-gradient (@direction, @gradientColor, @bgColor) {
  background-color: @bgColor;
  background: -webkit-linear-gradient(top, @direction, @gradientColor);
  background:    -moz-linear-gradient(top, @direction, @gradientColor);
  background:     -ms-linear-gradient(top, @direction, @gradientColor);
  background:      -o-linear-gradient(top, @direction, @gradientColor);
  background:        -webkit-gradient(linear, left top, left bottom, from(@direction), to(@gradientColor));
  background:         linear-gradient(top, @direction, @gradientColor);
}

.css-horizontal-gradient (@direction, @gradientColor, @bgColor) {
  background-color: @bgColor;
  background: -webkit-linear-gradient(left, @direction, @gradientColor);
  background:    -moz-linear-gradient(left, @direction, @gradientColor);
  background:     -ms-linear-gradient(left, @direction, @gradientColor);
  background:      -o-linear-gradient(left, @direction, @gradientColor);
  background:        -webkit-gradient(linear, left top, right top, from(@direction), to(@gradientColor));
  background:         linear-gradient(left, @direction, @gradientColor);
}

.css-gradient (@direction, @gradientColor, @bgColor) {
  .css-vertical-gradient (@direction, @gradientColor, @bgColor);
}

@keyframes fa-spin {
  0% {
    .css-rotate(0deg);
  }
  100% {
    .css-rotate(359deg);
  }
}
@keyframes cssload-spin {
  100% {
    .css-rotate(360deg);
  }
}
@keyframes cssload-border-process {
  100% {
    .css-translate(100%, 0);
  }
}
.evol-mm-layout-general () {
  .evol-mm-layout-general-while(@index: 12) when (@index > 0) {
    .evol-mm-layout-general-while(@index - 1);
    @class-name: ~".evol-mm-layout-@{index}";
    @{class-name} {
        width: @index*100%/12;
    }
  }
  .evol-mm-layout-general-while;
}
