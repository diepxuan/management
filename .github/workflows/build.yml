# Runs tests and verifies that the package can be built.
name: Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
    # paths:
    # - "src/debian/changelog"
    paths-ignore:
      - "**.md"
  pull_request:
    branches: [main]
    # paths:
    # - "src/debian/changelog"
    paths-ignore:
      - "**.md"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # if: ${{ false }}
    runs-on: ${{matrix.operating-system}}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-22.04, ubuntu-20.04]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        if: ${{ false }}
        with:
          python-version: "3.9"
      # Create GPG key if not exists
      #     gpg --full-generate-key
      # List to select GPG key
      #     gpg --list-secret-keys --keyid-format=long
      #     Example: rsa3072/7E0EC917A5074BD3 2023-03-13 [SC] [expires: 2025-03-12]
      # Generate key as base64
      #     gpg --export-secret-keys 3AA5C34371567BD2 | base64
      - name: Dynamically set environment variable
        run: |
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh
          bash ci/environment.sh
        env:
          repository: ${{ github.repository }}
          branch: ${{ github.ref_name }}

      - name: Retrieve the secret, decode and import GPG key
        run: |
          echo "$GPG_KEY====" | tr -d '\n' | fold -w 4 | sed '$ d' | tr -d '\n' | fold -w 76 | base64 -di | gpg --batch --import || true
          gpg --list-secret-keys --keyid-format=long
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Configure Git gpg
        if: true
        run: |
          git config --local user.email "$GIT_COMMITTER_EMAIL"
          git config --local user.name "$GIT_COMMITTER_NAME"
          git config --local pull.rebase true
          git config commit.gpgsign true
          git config user.signingkey $GPG_KEY_ID
        env:
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ github.repository_owner }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Installing build dependencies
        run: bash ci/depends.sh

      - name: Updating build information
        run: bash ci/update_packages.sh
        env:
          DEBEMAIL: ductn@diepxuan.com
          EMAIL: ductn@diepxuan.com
          DEBFULLNAME: Tran Ngoc Duc
          NAME: Tran Ngoc Duc

      - name: Pre-build package binary
        run: bash ci/pre_build.sh

      - name: Building package binary
        if: ${{ false }}
        run: bash ci/build.sh
        env:
          BUILDPACKAGE_OPTS: --force-sign
          BUILDPACKAGE_EPOCH: ${{ env.BUILDPACKAGE_EPOCH }}
          DEB_SIGN_KEYID: ${{ secrets.GPG_KEY_ID }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      - name: Building package source
        run: bash ci/build.sh
        env:
          BUILDPACKAGE_OPTS: --force-sign -S
          BUILDPACKAGE_EPOCH: ${{ env.BUILDPACKAGE_EPOCH }}
          DEB_SIGN_KEYID: ${{ secrets.GPG_KEY_ID }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Put package to Personal Package archives
        run: bash ci/put_ppa_packages.sh

      - name: Install osc tool
        run: |
          sudo apt update
          sudo apt install -y osc
          sudo apt install -y build-essential python3-dev libssl-dev libffi-dev
          # pip3 install M2Crypto
          # pip3 install --upgrade osc

      - name: Configure osc with OBS credentials
        if: ${{ false }}
        run: |
          # Cấu hình osc với thông tin đăng nhập và token
          osc config apiurl https://api.opensuse.org
          osc config username ${{ secrets.OBS_USERNAME }}
          osc config password ${{ secrets.OBS_TOKEN }}

      - name: Configure osc with OBS credentials
        run: |
          # Tạo file cấu hình osc mà không yêu cầu nhập thủ công
          mkdir -p ~/.config/osc
          echo "[general]" > ~/.config/osc/oscrc
          echo "apiurl = https://api.opensuse.org" >> ~/.config/osc/oscrc
          # echo "username = $OBS_USERNAME" >> ~/.config/osc/oscrc
          # echo "password = $OSC_PASSWORD" >> ~/.config/osc/oscrc
          echo "[https://api.opensuse.org]" >> ~/.config/osc/oscrc
          # echo "username = $OBS_USERNAME" >> ~/.config/osc/oscrc
          # echo "password = $OSC_PASSWORD" >> ~/.config/osc/oscrc
          echo "user=$OBS_USERNAME" >> ~/.config/osc/oscrc
          echo "pass=$OSC_PASSWORD" >> ~/.config/osc/oscrc
          echo "credentials_mgr_class=osc.credentials.PlaintextConfigFileCredentialsManager" >> ~/.config/osc/oscrc
        env:
          OBS_USERNAME: ${{ secrets.OBS_USERNAME }}
          OBS_TOKEN: ${{ secrets.OBS_TOKEN }}
          OSC_PASSWORD: ${{ secrets.OSC_PASSWORD }}

      - name: Checkout OBS package
        run: |
          # Checkout dự án và package từ OBS
          osc checkout home:diepxuan/ductn

      - name: Copy source code to OBS package directory
        run: |
          # Sao chép mã nguồn từ GitHub vào thư mục OBS package
          cp -r src/* ductn/  # Đảm bảo rằng bạn đã clone package từ OBS

      - name: Commit and push changes to OBS
        run: |
          cd ductn/
          osc addremove  # Thêm các file mới
          osc ci -m "Update from GitHub"  # Commit và push lên OBS
