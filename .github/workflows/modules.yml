# Runs tests and verifies that the package can be built.
name: Push to Modules

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
    paths:
      - "src/Diepxuan/**"
      - "src/Cloudflare/**"
  pull_request:
    branches: [main]
    paths:
      - "src/Diepxuan/**"
      - "src/Cloudflare/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ${{matrix.operating-system}}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      # Create GPG key if not exists
      #     gpg --full-generate-key
      # List to select GPG key
      #     gpg --list-secret-keys --keyid-format=long
      #     Example: rsa3072/7E0EC917A5074BD3 2023-03-13 [SC] [expires: 2025-03-12]
      # Generate key as base64
      #     gpg --export-secret-keys 3AA5C34371567BD2 | base64
      - name: Dynamically set BUILDPACKAGE_EPOCH environment variable
        run: |
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh
          echo "BUILDPACKAGE_EPOCH=$(date -R)" >> $GITHUB_ENV

      - name: Generate environment
        working-directory: ./
        run: bash ci/environment.sh

      - name: Retrieve the secret, decode and import GPG key
        run: |
          echo "$GPG_KEY====" | tr -d '\n' | fold -w 4 | sed '$ d' | tr -d '\n' | fold -w 76 | base64 -di | gpg --batch --import || true
          gpg --list-secret-keys --keyid-format=long
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Add the custom gpg siging program that passes the passphrase to the gpg CLI
        if: false
        run: |
          rm -rf /tmp/gpg.sh
          echo '#!/bin/bash' >> /tmp/gpg.sh
          echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
          chmod +x /tmp/gpg.sh
          git config --global gpg.program /tmp/gpg.sh

      - name: Configure Git gpg
        if: true
        run: |
          git config --global user.email "$GIT_COMMITTER_EMAIL"
          git config --global user.name "$GIT_COMMITTER_NAME"
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
        env:
          GIT_COMMITTER_EMAIL: ${{ secrets.GIT_COMMITTER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ github.repository_owner }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Detect Directory Changes
        working-directory: ./
        run: bash ci/put_modules.sh
